
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000010a6  0000113a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010e  0080010e  00001148  2**0
                  ALLOC
  3 .debug_aranges 00000290  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000084d  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030c4  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cea  00000000  00000000  00004ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d89  00000000  00000000  000059d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  0000875c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017cf  00000000  00000000  00008b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021e6  00000000  00000000  0000a30b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000348  00000000  00000000  0000c4f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
uint8_t Endpoint_Discard_Stream(uint16_t Length
#if !defined(NO_STREAM_CALLBACKS)
                                , StreamCallbackPtr_t Callback
#endif
								)
{
       0:	ad c0       	rjmp	.+346    	; 0x15c <__ctors_end>

	sei();
}

void USB_ShutDown(void)
{
       2:	00 00       	nop
       4:	c8 c0       	rjmp	.+400    	; 0x196 <__bad_interrupt>
       6:	00 00       	nop
       8:	c6 c0       	rjmp	.+396    	; 0x196 <__bad_interrupt>
       a:	00 00       	nop
       c:	c4 c0       	rjmp	.+392    	; 0x196 <__bad_interrupt>
       e:	00 00       	nop
      10:	c2 c0       	rjmp	.+388    	; 0x196 <__bad_interrupt>
      12:	00 00       	nop
      14:	c0 c0       	rjmp	.+384    	; 0x196 <__bad_interrupt>
      16:	00 00       	nop
      18:	be c0       	rjmp	.+380    	; 0x196 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bc c0       	rjmp	.+376    	; 0x196 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ba c0       	rjmp	.+372    	; 0x196 <__bad_interrupt>
      22:	00 00       	nop
      24:	b8 c0       	rjmp	.+368    	; 0x196 <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c5       	rjmp	.+2752   	; 0xaea <__vector_10>
      2a:	00 00       	nop
      2c:	b4 c0       	rjmp	.+360    	; 0x196 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b2 c0       	rjmp	.+356    	; 0x196 <__bad_interrupt>
      32:	00 00       	nop
      34:	b0 c0       	rjmp	.+352    	; 0x196 <__bad_interrupt>
      36:	00 00       	nop
      38:	ae c0       	rjmp	.+348    	; 0x196 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ac c0       	rjmp	.+344    	; 0x196 <__bad_interrupt>
      3e:	00 00       	nop
      40:	aa c0       	rjmp	.+340    	; 0x196 <__bad_interrupt>
      42:	00 00       	nop
      44:	a8 c0       	rjmp	.+336    	; 0x196 <__bad_interrupt>
      46:	00 00       	nop
      48:	a6 c0       	rjmp	.+332    	; 0x196 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a4 c0       	rjmp	.+328    	; 0x196 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a2 c0       	rjmp	.+324    	; 0x196 <__bad_interrupt>
      52:	00 00       	nop
      54:	a0 c0       	rjmp	.+320    	; 0x196 <__bad_interrupt>
      56:	00 00       	nop
      58:	9e c0       	rjmp	.+316    	; 0x196 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9c c0       	rjmp	.+312    	; 0x196 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9a c0       	rjmp	.+308    	; 0x196 <__bad_interrupt>
      62:	00 00       	nop
      64:	98 c0       	rjmp	.+304    	; 0x196 <__bad_interrupt>
      66:	00 00       	nop
      68:	96 c0       	rjmp	.+300    	; 0x196 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	94 c0       	rjmp	.+296    	; 0x196 <__bad_interrupt>
      6e:	00 00       	nop
      70:	92 c0       	rjmp	.+292    	; 0x196 <__bad_interrupt>
      72:	00 00       	nop
      74:	90 c0       	rjmp	.+288    	; 0x196 <__bad_interrupt>
      76:	00 00       	nop
      78:	8e c0       	rjmp	.+284    	; 0x196 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8c c0       	rjmp	.+280    	; 0x196 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8a c0       	rjmp	.+276    	; 0x196 <__bad_interrupt>
      82:	00 00       	nop
      84:	88 c0       	rjmp	.+272    	; 0x196 <__bad_interrupt>
      86:	00 00       	nop
      88:	86 c0       	rjmp	.+268    	; 0x196 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	84 c0       	rjmp	.+264    	; 0x196 <__bad_interrupt>
      8e:	00 00       	nop
      90:	82 c0       	rjmp	.+260    	; 0x196 <__bad_interrupt>
      92:	00 00       	nop
      94:	80 c0       	rjmp	.+256    	; 0x196 <__bad_interrupt>
      96:	00 00       	nop

00000098 <KeyboardReport>:
      98:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
      a8:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
      b8:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
      c8:	75 08 15 00 25 65 05 07 19 00 29 65 81 00 c0        u...%e....)e...

000000d7 <DeviceDescriptor>:
      d7:	12 01 10 01 00 00 00 08 eb 03 42 20 00 00 01 02     ..........B ....
      e7:	00 01                                               ..

000000e9 <ConfigurationDescriptor>:
      e9:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
      f9:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     109:	00 0a                                               ..

0000010b <LanguageString>:
     10b:	04 03 09 04                                         ....

0000010f <ManufacturerString>:
     10f:	22 03 44 00 65 00 6e 00 76 00 65 00 72 00 20 00     ".D.e.n.v.e.r. .
     11f:	47 00 69 00 6e 00 67 00 65 00 72 00 69 00 63 00     G.i.n.g.e.r.i.c.
     12f:	68 00 00 00                                         h...

00000133 <ProductString>:
     133:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
     143:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
     153:	65 00 6d 00 6f 00 00 00 00                          e.m.o....

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf ef       	ldi	r28, 0xFF	; 255
     162:	d0 e2       	ldi	r29, 0x20	; 32
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	a0 e0       	ldi	r26, 0x00	; 0
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	e6 ea       	ldi	r30, 0xA6	; 166
     170:	f0 e1       	ldi	r31, 0x10	; 16
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0b bf       	out	0x3b, r16	; 59
     176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x14>
     178:	07 90       	elpm	r0, Z+
     17a:	0d 92       	st	X+, r0
     17c:	ae 30       	cpi	r26, 0x0E	; 14
     17e:	b1 07       	cpc	r27, r17
     180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0x10>

00000182 <__do_clear_bss>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	ae e0       	ldi	r26, 0x0E	; 14
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
     18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
     18c:	a3 32       	cpi	r26, 0x23	; 35
     18e:	b1 07       	cpc	r27, r17
     190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
     192:	cc d0       	rcall	.+408    	; 0x32c <main>
     194:	86 c7       	rjmp	.+3852   	; 0x10a2 <_exit>

00000196 <__bad_interrupt>:
     196:	34 cf       	rjmp	.-408    	; 0x0 <__vectors>

00000198 <memcmp>:
     198:	fb 01       	movw	r30, r22
     19a:	dc 01       	movw	r26, r24
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <memcmp+0xe>
     19e:	8d 91       	ld	r24, X+
     1a0:	01 90       	ld	r0, Z+
     1a2:	80 19       	sub	r24, r0
     1a4:	21 f4       	brne	.+8      	; 0x1ae <memcmp+0x16>
     1a6:	41 50       	subi	r20, 0x01	; 1
     1a8:	50 40       	sbci	r21, 0x00	; 0
     1aa:	c8 f7       	brcc	.-14     	; 0x19e <memcmp+0x6>
     1ac:	88 1b       	sub	r24, r24
     1ae:	99 0b       	sbc	r25, r25
     1b0:	08 95       	ret

000001b2 <memcpy>:
     1b2:	fb 01       	movw	r30, r22
     1b4:	dc 01       	movw	r26, r24
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <memcpy+0xa>
     1b8:	01 90       	ld	r0, Z+
     1ba:	0d 92       	st	X+, r0
     1bc:	41 50       	subi	r20, 0x01	; 1
     1be:	50 40       	sbci	r21, 0x00	; 0
     1c0:	d8 f7       	brcc	.-10     	; 0x1b8 <memcpy+0x6>
     1c2:	08 95       	ret

000001c4 <memset>:
     1c4:	dc 01       	movw	r26, r24
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <memset+0x6>
     1c8:	6d 93       	st	X+, r22
     1ca:	41 50       	subi	r20, 0x01	; 1
     1cc:	50 40       	sbci	r21, 0x00	; 0
     1ce:	e0 f7       	brcc	.-8      	; 0x1c8 <memset+0x4>
     1d0:	08 95       	ret

000001d2 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	8f 70       	andi	r24, 0x0F	; 15
     1d6:	80 6a       	ori	r24, 0xA0	; 160
     1d8:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1da:	08 95       	ret

000001dc <EVENT_USB_Device_Disconnect>:
     1dc:	8b b1       	in	r24, 0x0b	; 11
     1de:	8f 70       	andi	r24, 0x0F	; 15
     1e0:	80 61       	ori	r24, 0x10	; 16
     1e2:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1e4:	08 95       	ret

000001e6 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* HIDInterfaceInfo);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     1e6:	80 91 0b 01 	lds	r24, 0x010B
     1ea:	90 91 0c 01 	lds	r25, 0x010C
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	29 f0       	breq	.+10     	; 0x1fc <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	90 93 0c 01 	sts	0x010C, r25
     1f8:	80 93 0b 01 	sts	0x010B, r24
     1fc:	08 95       	ret

000001fe <CALLBACK_HID_Device_CreateHIDReport>:
 *
 *  \return Boolean true to force the sending of the report, false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo, uint8_t* const ReportID,
                                         const uint8_t ReportType, void* ReportData, uint16_t* ReportSize)
{
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	e8 01       	movw	r28, r16
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     208:	d9 01       	movw	r26, r18
			}
			
			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
     20a:	23 b1       	in	r18, 0x03	; 3
     20c:	8c b1       	in	r24, 0x0c	; 12
     20e:	80 95       	com	r24
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	80 73       	andi	r24, 0x30	; 48
     214:	90 70       	andi	r25, 0x00	; 0
     216:	95 95       	asr	r25
     218:	87 95       	ror	r24
     21a:	20 95       	com	r18
     21c:	20 7e       	andi	r18, 0xE0	; 224
     21e:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     220:	3c b1       	in	r19, 0x0c	; 12
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	uint8_t UsedKeyCodes = 0;
	
	KeyboardReport->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	8c 93       	st	X, r24
	
	if (JoyStatus_LCL & JOY_UP)
     226:	27 ff       	sbrs	r18, 7
     228:	02 c0       	rjmp	.+4      	; 0x22e <CALLBACK_HID_Device_CreateHIDReport+0x30>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = 0x04; // A
     22a:	84 e0       	ldi	r24, 0x04	; 4
     22c:	05 c0       	rjmp	.+10     	; 0x238 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
	else if (JoyStatus_LCL & JOY_DOWN)
     22e:	24 fd       	sbrc	r18, 4
     230:	02 c0       	rjmp	.+4      	; 0x236 <CALLBACK_HID_Device_CreateHIDReport+0x38>
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	05 c0       	rjmp	.+10     	; 0x240 <CALLBACK_HID_Device_CreateHIDReport+0x42>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = 0x05; // B
     236:	85 e0       	ldi	r24, 0x05	; 5
     238:	12 96       	adiw	r26, 0x02	; 2
     23a:	8c 93       	st	X, r24
     23c:	12 97       	sbiw	r26, 0x02	; 2
     23e:	91 e0       	ldi	r25, 0x01	; 1

	if (JoyStatus_LCL & JOY_LEFT)
     240:	26 ff       	sbrs	r18, 6
     242:	05 c0       	rjmp	.+10     	; 0x24e <CALLBACK_HID_Device_CreateHIDReport+0x50>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = 0x06; // C
     244:	fd 01       	movw	r30, r26
     246:	e9 0f       	add	r30, r25
     248:	f1 1d       	adc	r31, r1
     24a:	86 e0       	ldi	r24, 0x06	; 6
     24c:	06 c0       	rjmp	.+12     	; 0x25a <CALLBACK_HID_Device_CreateHIDReport+0x5c>
	else if (JoyStatus_LCL & JOY_RIGHT)
     24e:	23 ff       	sbrs	r18, 3
     250:	06 c0       	rjmp	.+12     	; 0x25e <CALLBACK_HID_Device_CreateHIDReport+0x60>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = 0x07; // D
     252:	fd 01       	movw	r30, r26
     254:	e9 0f       	add	r30, r25
     256:	f1 1d       	adc	r31, r1
     258:	87 e0       	ldi	r24, 0x07	; 7
     25a:	82 83       	std	Z+2, r24	; 0x02
     25c:	9f 5f       	subi	r25, 0xFF	; 255

	if (JoyStatus_LCL & JOY_PRESS)
     25e:	25 ff       	sbrs	r18, 5
     260:	06 c0       	rjmp	.+12     	; 0x26e <CALLBACK_HID_Device_CreateHIDReport+0x70>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = 0x08; // E
     262:	fd 01       	movw	r30, r26
     264:	e9 0f       	add	r30, r25
     266:	f1 1d       	adc	r31, r1
     268:	88 e0       	ldi	r24, 0x08	; 8
     26a:	82 83       	std	Z+2, r24	; 0x02
     26c:	9f 5f       	subi	r25, 0xFF	; 255
	  
	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     26e:	32 fd       	sbrc	r19, 2
     270:	05 c0       	rjmp	.+10     	; 0x27c <CALLBACK_HID_Device_CreateHIDReport+0x7e>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = 0x09; // F
     272:	a9 0f       	add	r26, r25
     274:	b1 1d       	adc	r27, r1
     276:	89 e0       	ldi	r24, 0x09	; 9
     278:	12 96       	adiw	r26, 0x02	; 2
     27a:	8c 93       	st	X, r24

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     27c:	88 e0       	ldi	r24, 0x08	; 8
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	99 83       	std	Y+1, r25	; 0x01
     282:	88 83       	st	Y, r24
	return false;
}
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <CALLBACK_HID_Device_ProcessHIDReport>:
 *  \param[in] ReportData  Pointer to a buffer where the created report has been stored
 *  \param[in] ReportSize  Size in bytes of the received HID report
 */
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo, const uint8_t ReportID,
                                          const void* ReportData, const uint16_t ReportSize)
{
     290:	fa 01       	movw	r30, r20
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     292:	80 81       	ld	r24, Z
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	80 fd       	sbrc	r24, 0
     298:	90 e1       	ldi	r25, 0x10	; 16
	  LEDMask |= LEDS_LED1;
	
	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     29a:	81 fd       	sbrc	r24, 1
	  LEDMask |= LEDS_LED3;
     29c:	90 68       	ori	r25, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     29e:	82 fd       	sbrc	r24, 2
	  LEDMask |= LEDS_LED4;
     2a0:	90 64       	ori	r25, 0x40	; 64
     2a2:	8b b1       	in	r24, 0x0b	; 11
     2a4:	8f 70       	andi	r24, 0x0F	; 15
     2a6:	98 2b       	or	r25, r24
     2a8:	9b b9       	out	0x0b, r25	; 11
	  
	LEDs_SetAllLEDs(LEDMask);
}
     2aa:	08 95       	ret

000002ac <EVENT_USB_Device_UnhandledControlRequest>:
}

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	91 e0       	ldi	r25, 0x01	; 1
}
     2b0:	e6 c5       	rjmp	.+3020   	; 0xe7e <HID_Device_ProcessControlRequest>

000002b2 <EVENT_USB_Device_ConfigurationChanged>:
     2b2:	8b b1       	in	r24, 0x0b	; 11
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	80 66       	ori	r24, 0x60	; 96
     2b8:	8b b9       	out	0x0b, r24	; 11
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	if (!(HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface)))
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	ad d5       	rcall	.+2906   	; 0xe1a <HID_Device_ConfigureEndpoints>
     2c0:	88 23       	and	r24, r24
     2c2:	21 f4       	brne	.+8      	; 0x2cc <EVENT_USB_Device_ConfigurationChanged+0x1a>
     2c4:	8b b1       	in	r24, 0x0b	; 11
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	80 69       	ori	r24, 0x90	; 144
     2ca:	8b b9       	out	0x0b, r24	; 11
	  LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

	USB_Device_EnableSOFEvents();
     2cc:	80 91 e2 00 	lds	r24, 0x00E2
     2d0:	84 60       	ori	r24, 0x04	; 4
     2d2:	80 93 e2 00 	sts	0x00E2, r24
}
     2d6:	08 95       	ret

000002d8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2d8:	84 b7       	in	r24, 0x34	; 52
     2da:	87 7f       	andi	r24, 0xF7	; 247
     2dc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2de:	88 e1       	ldi	r24, 0x18	; 24
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	80 93 60 00 	sts	0x0060, r24
     2e8:	10 92 60 00 	sts	0x0060, r1
     2ec:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	20 e8       	ldi	r18, 0x80	; 128
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	20 93 61 00 	sts	0x0061, r18
     2fc:	80 93 61 00 	sts	0x0061, r24
     300:	0f be       	out	0x3f, r0	; 63
			
		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     302:	84 b1       	in	r24, 0x04	; 4
     304:	8f 71       	andi	r24, 0x1F	; 31
     306:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     308:	8d b1       	in	r24, 0x0d	; 13
     30a:	8f 7c       	andi	r24, 0xCF	; 207
     30c:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     30e:	85 b1       	in	r24, 0x05	; 5
     310:	80 6e       	ori	r24, 0xE0	; 224
     312:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;				
     314:	8e b1       	in	r24, 0x0e	; 14
     316:	80 63       	ori	r24, 0x30	; 48
     318:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     31a:	8a b1       	in	r24, 0x0a	; 10
     31c:	80 6f       	ori	r24, 0xF0	; 240
     31e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     320:	8b b1       	in	r24, 0x0b	; 11
     322:	8f 70       	andi	r24, 0x0F	; 15
     324:	8b b9       	out	0x0b, r24	; 11
	
		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     326:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     328:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
}
     32a:	c1 c3       	rjmp	.+1922   	; 0xaae <USB_Init>

0000032c <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     32c:	d5 df       	rcall	.-86     	; 0x2d8 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     32e:	8b b1       	in	r24, 0x0b	; 11
     330:	8f 70       	andi	r24, 0x0F	; 15
     332:	80 61       	ori	r24, 0x10	; 16
     334:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	
	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	ad d4       	rcall	.+2394   	; 0xc96 <HID_Device_USBTask>
		USB_USBTask();
     33c:	99 d4       	rcall	.+2354   	; 0xc70 <USB_USBTask>
     33e:	fb cf       	rjmp	.-10     	; 0x336 <main+0xa>

00000340 <CALLBACK_USB_GetDescriptor>:
 *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, this function
 *  is called so that the descriptor details can be passed back and the appropriate descriptor sent back to the
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
     340:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     342:	93 30       	cpi	r25, 0x03	; 3
     344:	b1 f0       	breq	.+44     	; 0x372 <CALLBACK_USB_GetDescriptor+0x32>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	28 f4       	brcc	.+10     	; 0x354 <CALLBACK_USB_GetDescriptor+0x14>
     34a:	91 30       	cpi	r25, 0x01	; 1
     34c:	41 f0       	breq	.+16     	; 0x35e <CALLBACK_USB_GetDescriptor+0x1e>
     34e:	92 30       	cpi	r25, 0x02	; 2
     350:	79 f5       	brne	.+94     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x70>
     352:	0a c0       	rjmp	.+20     	; 0x368 <CALLBACK_USB_GetDescriptor+0x28>
     354:	91 32       	cpi	r25, 0x21	; 33
     356:	11 f1       	breq	.+68     	; 0x39c <CALLBACK_USB_GetDescriptor+0x5c>
     358:	92 32       	cpi	r25, 0x22	; 34
     35a:	51 f5       	brne	.+84     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x70>
     35c:	24 c0       	rjmp	.+72     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x66>
     35e:	e7 ed       	ldi	r30, 0xD7	; 215
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	22 e1       	ldi	r18, 0x12	; 18
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	28 c0       	rjmp	.+80     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x78>
     368:	e9 ee       	ldi	r30, 0xE9	; 233
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	22 e2       	ldi	r18, 0x22	; 34
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	23 c0       	rjmp	.+70     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	49 f0       	breq	.+18     	; 0x388 <CALLBACK_USB_GetDescriptor+0x48>
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	18 f0       	brcs	.+6      	; 0x380 <CALLBACK_USB_GetDescriptor+0x40>
     37a:	82 30       	cpi	r24, 0x02	; 2
     37c:	c9 f4       	brne	.+50     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x70>
     37e:	0a c0       	rjmp	.+20     	; 0x394 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     380:	eb e0       	ldi	r30, 0x0B	; 11
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	84 91       	lpm	r24, Z+
     386:	03 c0       	rjmp	.+6      	; 0x38e <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     388:	ef e0       	ldi	r30, 0x0F	; 15
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	84 91       	lpm	r24, Z+
     38e:	28 2f       	mov	r18, r24
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	12 c0       	rjmp	.+36     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     394:	e3 e3       	ldi	r30, 0x33	; 51
     396:	f1 e0       	ldi	r31, 0x01	; 1
     398:	84 91       	lpm	r24, Z+
     39a:	f9 cf       	rjmp	.-14     	; 0x38e <CALLBACK_USB_GetDescriptor+0x4e>
     39c:	eb ef       	ldi	r30, 0xFB	; 251
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	29 e0       	ldi	r18, 0x09	; 9
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	09 c0       	rjmp	.+18     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x78>
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
     3a6:	e8 e9       	ldi	r30, 0x98	; 152
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	2f e3       	ldi	r18, 0x3F	; 63
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x78>
     3b0:	e0 e0       	ldi	r30, 0x00	; 0
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
			Address = (void*)&KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}
	
	*DescriptorAddress = Address;
     3b8:	ed 93       	st	X+, r30
     3ba:	fc 93       	st	X, r31
	return Size;
}
     3bc:	c9 01       	movw	r24, r18
     3be:	08 95       	ret

000003c0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     3c0:	1f 93       	push	r17
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	ac 97       	sbiw	r28, 0x2c	; 44
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	eb e1       	ldi	r30, 0x1B	; 27
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     3da:	80 91 f1 00 	lds	r24, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
     3de:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	e3 32       	cpi	r30, 0x23	; 35
     3e4:	f2 07       	cpc	r31, r18
     3e6:	c9 f7       	brne	.-14     	; 0x3da <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     3e8:	80 91 1b 01 	lds	r24, 0x011B
	
	switch (USB_ControlRequest.bRequest)
     3ec:	30 91 1c 01 	lds	r19, 0x011C
     3f0:	35 30       	cpi	r19, 0x05	; 5
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <USB_Device_ProcessControlRequest+0x36>
     3f4:	86 c0       	rjmp	.+268    	; 0x502 <USB_Device_ProcessControlRequest+0x142>
     3f6:	36 30       	cpi	r19, 0x06	; 6
     3f8:	40 f4       	brcc	.+16     	; 0x40a <USB_Device_ProcessControlRequest+0x4a>
     3fa:	31 30       	cpi	r19, 0x01	; 1
     3fc:	c1 f1       	breq	.+112    	; 0x46e <USB_Device_ProcessControlRequest+0xae>
     3fe:	31 30       	cpi	r19, 0x01	; 1
     400:	70 f0       	brcs	.+28     	; 0x41e <USB_Device_ProcessControlRequest+0x5e>
     402:	33 30       	cpi	r19, 0x03	; 3
     404:	09 f0       	breq	.+2      	; 0x408 <USB_Device_ProcessControlRequest+0x48>
     406:	23 c1       	rjmp	.+582    	; 0x64e <USB_Device_ProcessControlRequest+0x28e>
     408:	32 c0       	rjmp	.+100    	; 0x46e <USB_Device_ProcessControlRequest+0xae>
     40a:	38 30       	cpi	r19, 0x08	; 8
     40c:	09 f4       	brne	.+2      	; 0x410 <USB_Device_ProcessControlRequest+0x50>
     40e:	f0 c0       	rjmp	.+480    	; 0x5f0 <USB_Device_ProcessControlRequest+0x230>
     410:	39 30       	cpi	r19, 0x09	; 9
     412:	09 f4       	brne	.+2      	; 0x416 <USB_Device_ProcessControlRequest+0x56>
     414:	03 c1       	rjmp	.+518    	; 0x61c <USB_Device_ProcessControlRequest+0x25c>
     416:	36 30       	cpi	r19, 0x06	; 6
     418:	09 f0       	breq	.+2      	; 0x41c <USB_Device_ProcessControlRequest+0x5c>
     41a:	19 c1       	rjmp	.+562    	; 0x64e <USB_Device_ProcessControlRequest+0x28e>
     41c:	91 c0       	rjmp	.+290    	; 0x540 <USB_Device_ProcessControlRequest+0x180>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     41e:	80 38       	cpi	r24, 0x80	; 128
     420:	21 f0       	breq	.+8      	; 0x42a <USB_Device_ProcessControlRequest+0x6a>
     422:	82 38       	cpi	r24, 0x82	; 130
     424:	09 f0       	breq	.+2      	; 0x428 <USB_Device_ProcessControlRequest+0x68>
     426:	13 c1       	rjmp	.+550    	; 0x64e <USB_Device_ProcessControlRequest+0x28e>
     428:	08 c0       	rjmp	.+16     	; 0x43a <USB_Device_ProcessControlRequest+0x7a>
     42a:	90 91 16 01 	lds	r25, 0x0116
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
	#endif

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
			if (USB_RemoteWakeupEnabled)
     42e:	80 91 17 01 	lds	r24, 0x0117
     432:	88 23       	and	r24, r24
     434:	91 f0       	breq	.+36     	; 0x45a <USB_Device_ProcessControlRequest+0x9a>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     436:	92 60       	ori	r25, 0x02	; 2
     438:	10 c0       	rjmp	.+32     	; 0x45a <USB_Device_ProcessControlRequest+0x9a>
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint(USB_ControlRequest.wIndex & 0xFF);
     43a:	80 91 1f 01 	lds	r24, 0x011F
     43e:	80 93 e9 00 	sts	0x00E9, r24

			CurrentStatus = Endpoint_IsStalled();
     442:	80 91 eb 00 	lds	r24, 0x00EB
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	25 e0       	ldi	r18, 0x05	; 5
     44a:	96 95       	lsr	r25
     44c:	87 95       	ror	r24
     44e:	2a 95       	dec	r18
     450:	e1 f7       	brne	.-8      	; 0x44a <USB_Device_ProcessControlRequest+0x8a>
     452:	98 2f       	mov	r25, r24
     454:	91 70       	andi	r25, 0x01	; 1

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);			  
     456:	10 92 e9 00 	sts	0x00E9, r1
#endif
		default:
			return;
	}

	Endpoint_ClearSETUP();
     45a:	80 91 e8 00 	lds	r24, 0x00E8
     45e:	87 7f       	andi	r24, 0xF7	; 247
     460:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
     464:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
     468:	10 92 f1 00 	sts	0x00F1, r1
     46c:	cc c0       	rjmp	.+408    	; 0x606 <USB_Device_ProcessControlRequest+0x246>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     46e:	88 23       	and	r24, r24
     470:	19 f0       	breq	.+6      	; 0x478 <USB_Device_ProcessControlRequest+0xb8>
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	09 f0       	breq	.+2      	; 0x478 <USB_Device_ProcessControlRequest+0xb8>
     476:	eb c0       	rjmp	.+470    	; 0x64e <USB_Device_ProcessControlRequest+0x28e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{	
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	8f 71       	andi	r24, 0x1F	; 31
     47c:	90 70       	andi	r25, 0x00	; 0
     47e:	00 97       	sbiw	r24, 0x00	; 0
     480:	21 f0       	breq	.+8      	; 0x48a <USB_Device_ProcessControlRequest+0xca>
     482:	02 97       	sbiw	r24, 0x02	; 2
     484:	09 f0       	breq	.+2      	; 0x488 <USB_Device_ProcessControlRequest+0xc8>
     486:	e4 c0       	rjmp	.+456    	; 0x650 <USB_Device_ProcessControlRequest+0x290>
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <USB_Device_ProcessControlRequest+0xe2>
	{
#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
     48a:	80 91 1d 01 	lds	r24, 0x011D
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	09 f0       	breq	.+2      	; 0x494 <USB_Device_ProcessControlRequest+0xd4>
     492:	de c0       	rjmp	.+444    	; 0x650 <USB_Device_ProcessControlRequest+0x290>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     494:	10 92 17 01 	sts	0x0117, r1
     498:	33 30       	cpi	r19, 0x03	; 3
     49a:	69 f5       	brne	.+90     	; 0x4f6 <USB_Device_ProcessControlRequest+0x136>
     49c:	80 93 17 01 	sts	0x0117, r24
     4a0:	2a c0       	rjmp	.+84     	; 0x4f6 <USB_Device_ProcessControlRequest+0x136>
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
     4a2:	80 91 1d 01 	lds	r24, 0x011D
     4a6:	88 23       	and	r24, r24
     4a8:	31 f5       	brne	.+76     	; 0x4f6 <USB_Device_ProcessControlRequest+0x136>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     4aa:	20 91 1f 01 	lds	r18, 0x011F
     4ae:	27 70       	andi	r18, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <USB_Device_ProcessControlRequest+0xf4>
     4b2:	ce c0       	rjmp	.+412    	; 0x650 <USB_Device_ProcessControlRequest+0x290>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
     4b4:	20 93 e9 00 	sts	0x00E9, r18

				if (Endpoint_IsEnabled())
     4b8:	80 91 eb 00 	lds	r24, 0x00EB
     4bc:	80 ff       	sbrs	r24, 0
     4be:	1b c0       	rjmp	.+54     	; 0x4f6 <USB_Device_ProcessControlRequest+0x136>
				{				
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     4c0:	33 30       	cpi	r19, 0x03	; 3
     4c2:	21 f4       	brne	.+8      	; 0x4cc <USB_Device_ProcessControlRequest+0x10c>
					{
						Endpoint_StallTransaction();
     4c4:	80 91 eb 00 	lds	r24, 0x00EB
     4c8:	80 62       	ori	r24, 0x20	; 32
     4ca:	13 c0       	rjmp	.+38     	; 0x4f2 <USB_Device_ProcessControlRequest+0x132>
					}
					else
					{
						Endpoint_ClearStall();
     4cc:	80 91 eb 00 	lds	r24, 0x00EB
     4d0:	80 61       	ori	r24, 0x10	; 16
     4d2:	80 93 eb 00 	sts	0x00EB, r24
						Endpoint_ResetFIFO(EndpointIndex);
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <USB_Device_ProcessControlRequest+0x120>
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	2a 95       	dec	r18
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <USB_Device_ProcessControlRequest+0x11c>
     4e4:	80 93 ea 00 	sts	0x00EA, r24
     4e8:	10 92 ea 00 	sts	0x00EA, r1
						Endpoint_ResetDataToggle();
     4ec:	80 91 eb 00 	lds	r24, 0x00EB
     4f0:	88 60       	ori	r24, 0x08	; 8
     4f2:	80 93 eb 00 	sts	0x00EB, r24
#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     4f6:	10 92 e9 00 	sts	0x00E9, r1

	Endpoint_ClearSETUP();
     4fa:	80 91 e8 00 	lds	r24, 0x00E8
     4fe:	87 7f       	andi	r24, 0xF7	; 247
     500:	89 c0       	rjmp	.+274    	; 0x614 <USB_Device_ProcessControlRequest+0x254>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     502:	88 23       	and	r24, r24
     504:	09 f0       	breq	.+2      	; 0x508 <USB_Device_ProcessControlRequest+0x148>
     506:	a3 c0       	rjmp	.+326    	; 0x64e <USB_Device_ProcessControlRequest+0x28e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     508:	10 91 1d 01 	lds	r17, 0x011D

	Endpoint_ClearSETUP();
     50c:	80 91 e8 00 	lds	r24, 0x00E8
     510:	87 7f       	andi	r24, 0xF7	; 247
     512:	80 93 e8 00 	sts	0x00E8, r24
	
	Endpoint_ClearStatusStage();
     516:	ec d0       	rcall	.+472    	; 0x6f0 <Endpoint_ClearStatusStage>
     518:	05 c0       	rjmp	.+10     	; 0x524 <USB_Device_ProcessControlRequest+0x164>
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     51a:	80 91 1a 01 	lds	r24, 0x011A
     51e:	88 23       	and	r24, r24
     520:	09 f4       	brne	.+2      	; 0x524 <USB_Device_ProcessControlRequest+0x164>
     522:	96 c0       	rjmp	.+300    	; 0x650 <USB_Device_ProcessControlRequest+0x290>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
     524:	80 91 e8 00 	lds	r24, 0x00E8
     528:	80 ff       	sbrs	r24, 0
     52a:	f7 cf       	rjmp	.-18     	; 0x51a <USB_Device_ProcessControlRequest+0x15a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     52c:	91 2f       	mov	r25, r17
     52e:	9f 77       	andi	r25, 0x7F	; 127
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	if (DeviceAddress)
     530:	19 f0       	breq	.+6      	; 0x538 <USB_Device_ProcessControlRequest+0x178>
	  USB_DeviceState = DEVICE_STATE_Addressed;
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	80 93 1a 01 	sts	0x011A, r24

	UDADDR = ((1 << ADDEN) | DeviceAddress);
     538:	90 68       	ori	r25, 0x80	; 128
     53a:	90 93 e3 00 	sts	0x00E3, r25
     53e:	88 c0       	rjmp	.+272    	; 0x650 <USB_Device_ProcessControlRequest+0x290>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     540:	80 58       	subi	r24, 0x80	; 128
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	08 f0       	brcs	.+2      	; 0x548 <USB_Device_ProcessControlRequest+0x188>
     546:	83 c0       	rjmp	.+262    	; 0x64e <USB_Device_ProcessControlRequest+0x28e>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t  DescriptorAddressSpace;
	#endif
	
	#if !defined(NO_INTERNAL_SERIAL) && (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     548:	80 91 1d 01 	lds	r24, 0x011D
     54c:	90 91 1e 01 	lds	r25, 0x011E
     550:	23 e0       	ldi	r18, 0x03	; 3
     552:	8c 3d       	cpi	r24, 0xDC	; 220
     554:	92 07       	cpc	r25, r18
     556:	81 f5       	brne	.+96     	; 0x5b8 <USB_Device_ProcessControlRequest+0x1f8>
     558:	de 01       	movw	r26, r28
     55a:	15 96       	adiw	r26, 0x05	; 5
     55c:	4e e0       	ldi	r20, 0x0E	; 14
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
	
	uint8_t SigReadAddress = 0x0E;

	for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
	{
		uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     562:	51 e2       	ldi	r21, 0x21	; 33
     564:	e4 2f       	mov	r30, r20
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	50 93 57 00 	sts	0x0057, r21
     56c:	84 91       	lpm	r24, Z+
		
		if (SerialCharNum & 0x01)
     56e:	20 ff       	sbrs	r18, 0
     570:	03 c0       	rjmp	.+6      	; 0x578 <USB_Device_ProcessControlRequest+0x1b8>
		{
			SerialByte >>= 4;
     572:	82 95       	swap	r24
     574:	8f 70       	andi	r24, 0x0F	; 15
			SigReadAddress++;
     576:	4f 5f       	subi	r20, 0xFF	; 255
}

#if !defined(NO_INTERNAL_SERIAL) && (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
static char USB_Device_NibbleToASCII(uint8_t Nibble)
{
	Nibble = ((Nibble & 0x0F) + '0');
     578:	98 2f       	mov	r25, r24
     57a:	9f 70       	andi	r25, 0x0F	; 15
     57c:	89 2f       	mov	r24, r25
     57e:	80 5d       	subi	r24, 0xD0	; 208
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
     580:	8a 33       	cpi	r24, 0x3A	; 58
     582:	08 f0       	brcs	.+2      	; 0x586 <USB_Device_ProcessControlRequest+0x1c6>
     584:	89 5f       	subi	r24, 0xF9	; 249
		{
			SerialByte >>= 4;
			SigReadAddress++;
		}
		
		SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
     586:	8c 93       	st	X, r24
     588:	11 96       	adiw	r26, 0x01	; 1
     58a:	1c 92       	st	X, r1
     58c:	11 97       	sbiw	r26, 0x01	; 1
     58e:	2f 5f       	subi	r18, 0xFF	; 255
     590:	3f 4f       	sbci	r19, 0xFF	; 255
     592:	12 96       	adiw	r26, 0x02	; 2
	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
	
	uint8_t SigReadAddress = 0x0E;

	for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
     594:	24 31       	cpi	r18, 0x14	; 20
     596:	31 05       	cpc	r19, r1
     598:	29 f7       	brne	.-54     	; 0x564 <USB_Device_ProcessControlRequest+0x1a4>
		}
		
		SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
	}
	
	Endpoint_ClearSETUP();
     59a:	80 91 e8 00 	lds	r24, 0x00E8
     59e:	87 7f       	andi	r24, 0xF7	; 247
     5a0:	80 93 e8 00 	sts	0x00E8, r24
		USB_Descriptor_Header_t Header;
		int16_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
     5a4:	8a e2       	ldi	r24, 0x2A	; 42
     5a6:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		int16_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	8c 83       	std	Y+4, r24	; 0x04
		SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
	}
	
	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     5ac:	ce 01       	movw	r24, r28
     5ae:	03 96       	adiw	r24, 0x03	; 3
     5b0:	6a e2       	ldi	r22, 0x2A	; 42
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	30 d1       	rcall	.+608    	; 0x816 <Endpoint_Write_Control_Stream_LE>
     5b6:	12 c0       	rjmp	.+36     	; 0x5dc <USB_Device_ProcessControlRequest+0x21c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     5b8:	60 91 1f 01 	lds	r22, 0x011F
     5bc:	ae 01       	movw	r20, r28
     5be:	4f 5f       	subi	r20, 0xFF	; 255
     5c0:	5f 4f       	sbci	r21, 0xFF	; 255
     5c2:	be de       	rcall	.-644    	; 0x340 <CALLBACK_USB_GetDescriptor>
     5c4:	bc 01       	movw	r22, r24
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	09 f4       	brne	.+2      	; 0x5cc <USB_Device_ProcessControlRequest+0x20c>
     5ca:	42 c0       	rjmp	.+132    	; 0x650 <USB_Device_ProcessControlRequest+0x290>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}
	
	Endpoint_ClearSETUP();
     5cc:	80 91 e8 00 	lds	r24, 0x00E8
     5d0:	87 7f       	andi	r24, 0xF7	; 247
     5d2:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	7d d1       	rcall	.+762    	; 0x8d6 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);	
	#endif

	Endpoint_ClearOUT();
     5dc:	80 91 e8 00 	lds	r24, 0x00E8
     5e0:	98 2f       	mov	r25, r24
     5e2:	9b 7f       	andi	r25, 0xFB	; 251
     5e4:	90 93 e8 00 	sts	0x00E8, r25
     5e8:	8f 77       	andi	r24, 0x7F	; 127
     5ea:	80 93 e8 00 	sts	0x00E8, r24
     5ee:	30 c0       	rjmp	.+96     	; 0x650 <USB_Device_ProcessControlRequest+0x290>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     5f0:	80 38       	cpi	r24, 0x80	; 128
     5f2:	69 f5       	brne	.+90     	; 0x64e <USB_Device_ProcessControlRequest+0x28e>
	EVENT_USB_Device_ConfigurationChanged();
}

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
     5f4:	80 91 e8 00 	lds	r24, 0x00E8
     5f8:	87 7f       	andi	r24, 0xF7	; 247
     5fa:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(USB_ConfigurationNumber);
     5fe:	80 91 18 01 	lds	r24, 0x0118
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     602:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_ClearIN();
     606:	80 91 e8 00 	lds	r24, 0x00E8
     60a:	98 2f       	mov	r25, r24
     60c:	9e 7f       	andi	r25, 0xFE	; 254
     60e:	90 93 e8 00 	sts	0x00E8, r25
     612:	8f 77       	andi	r24, 0x7F	; 127
     614:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearStatusStage();
     618:	6b d0       	rcall	.+214    	; 0x6f0 <Endpoint_ClearStatusStage>
     61a:	1a c0       	rjmp	.+52     	; 0x650 <USB_Device_ProcessControlRequest+0x290>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     61c:	88 23       	and	r24, r24
     61e:	b9 f4       	brne	.+46     	; 0x64e <USB_Device_ProcessControlRequest+0x28e>
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     620:	90 91 1d 01 	lds	r25, 0x011D
     624:	92 30       	cpi	r25, 0x02	; 2
     626:	a0 f4       	brcc	.+40     	; 0x650 <USB_Device_ProcessControlRequest+0x290>
		  return;
	}
	#endif
#endif
	
	Endpoint_ClearSETUP();
     628:	80 91 e8 00 	lds	r24, 0x00E8
     62c:	87 7f       	andi	r24, 0xF7	; 247
     62e:	80 93 e8 00 	sts	0x00E8, r24

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     632:	90 93 18 01 	sts	0x0118, r25

	Endpoint_ClearStatusStage();
     636:	5c d0       	rcall	.+184    	; 0x6f0 <Endpoint_ClearStatusStage>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
     638:	80 91 18 01 	lds	r24, 0x0118
     63c:	88 23       	and	r24, r24
     63e:	11 f4       	brne	.+4      	; 0x644 <USB_Device_ProcessControlRequest+0x284>
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	01 c0       	rjmp	.+2      	; 0x646 <USB_Device_ProcessControlRequest+0x286>
     644:	84 e0       	ldi	r24, 0x04	; 4
     646:	80 93 1a 01 	sts	0x011A, r24

	EVENT_USB_Device_ConfigurationChanged();
     64a:	33 de       	rcall	.-922    	; 0x2b2 <EVENT_USB_Device_ConfigurationChanged>
     64c:	01 c0       	rjmp	.+2      	; 0x650 <USB_Device_ProcessControlRequest+0x290>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
     64e:	2e de       	rcall	.-932    	; 0x2ac <EVENT_USB_Device_UnhandledControlRequest>
	  
	if (Endpoint_IsSETUPReceived())
     650:	80 91 e8 00 	lds	r24, 0x00E8
     654:	83 ff       	sbrs	r24, 3
     656:	0a c0       	rjmp	.+20     	; 0x66c <USB_Device_ProcessControlRequest+0x2ac>
	{
		Endpoint_StallTransaction();
     658:	80 91 eb 00 	lds	r24, 0x00EB
     65c:	80 62       	ori	r24, 0x20	; 32
     65e:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ClearSETUP();		
     662:	80 91 e8 00 	lds	r24, 0x00E8
     666:	87 7f       	andi	r24, 0xF7	; 247
     668:	80 93 e8 00 	sts	0x00E8, r24
	}
}
     66c:	ac 96       	adiw	r28, 0x2c	; 44
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	cf 91       	pop	r28
     67a:	df 91       	pop	r29
     67c:	1f 91       	pop	r17
     67e:	08 95       	ret

00000680 <Endpoint_BytesToEPSizeMaskDynamic>:
#if !defined(FIXED_CONTROL_ENDPOINT_SIZE)
uint8_t USB_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
     680:	28 e0       	ldi	r18, 0x08	; 8
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	03 c0       	rjmp	.+6      	; 0x68e <Endpoint_BytesToEPSizeMaskDynamic+0xe>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
				{
					MaskVal++;
     688:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     68a:	22 0f       	add	r18, r18
     68c:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
     68e:	28 17       	cp	r18, r24
     690:	39 07       	cpc	r19, r25
     692:	d0 f3       	brcs	.-12     	; 0x688 <Endpoint_BytesToEPSizeMaskDynamic+0x8>
	return Endpoint_BytesToEPSizeMask(Size);
}
     694:	84 2f       	mov	r24, r20
     696:	82 95       	swap	r24
     698:	80 7f       	andi	r24, 0xF0	; 240
     69a:	08 95       	ret

0000069c <Endpoint_ConfigureEndpoint_Prv>:

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number, const uint8_t UECFG0XData, const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
     69c:	80 93 e9 00 	sts	0x00E9, r24
	Endpoint_EnableEndpoint();
     6a0:	80 91 eb 00 	lds	r24, 0x00EB
     6a4:	81 60       	ori	r24, 0x01	; 1
     6a6:	80 93 eb 00 	sts	0x00EB, r24

	UECFG1X = 0;
     6aa:	10 92 ed 00 	sts	0x00ED, r1

	UECFG0X = UECFG0XData;
     6ae:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     6b2:	40 93 ed 00 	sts	0x00ED, r20

	return Endpoint_IsConfigured();
     6b6:	80 91 ee 00 	lds	r24, 0x00EE
}
     6ba:	88 1f       	adc	r24, r24
     6bc:	88 27       	eor	r24, r24
     6be:	88 1f       	adc	r24, r24
     6c0:	08 95       	ret

000006c2 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
     6c2:	10 92 f4 00 	sts	0x00F4, r1
     6c6:	90 e0       	ldi	r25, 0x00	; 0

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
     6c8:	90 93 e9 00 	sts	0x00E9, r25
		UEIENX = 0;
     6cc:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX = 0;
     6d0:	10 92 e8 00 	sts	0x00E8, r1
		Endpoint_DeallocateMemory();
     6d4:	80 91 ed 00 	lds	r24, 0x00ED
     6d8:	8d 7f       	andi	r24, 0xFD	; 253
     6da:	80 93 ed 00 	sts	0x00ED, r24
		Endpoint_DisableEndpoint();
     6de:	80 91 eb 00 	lds	r24, 0x00EB
     6e2:	8e 7f       	andi	r24, 0xFE	; 254
     6e4:	80 93 eb 00 	sts	0x00EB, r24

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     6e8:	9f 5f       	subi	r25, 0xFF	; 255
     6ea:	97 30       	cpi	r25, 0x07	; 7
     6ec:	69 f7       	brne	.-38     	; 0x6c8 <Endpoint_ClearEndpoints+0x6>
		UEIENX = 0;
		UEINTX = 0;
		Endpoint_DeallocateMemory();
		Endpoint_DisableEndpoint();
	}
}
     6ee:	08 95       	ret

000006f0 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6f0:	80 91 1b 01 	lds	r24, 0x011B
     6f4:	88 23       	and	r24, r24
     6f6:	bc f4       	brge	.+46     	; 0x726 <Endpoint_ClearStatusStage+0x36>
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6fa:	80 91 1a 01 	lds	r24, 0x011A
     6fe:	88 23       	and	r24, r24
     700:	f9 f0       	breq	.+62     	; 0x740 <Endpoint_ClearStatusStage+0x50>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     702:	80 91 e8 00 	lds	r24, 0x00E8
     706:	82 ff       	sbrs	r24, 2
     708:	f8 cf       	rjmp	.-16     	; 0x6fa <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
     70a:	80 91 e8 00 	lds	r24, 0x00E8
     70e:	98 2f       	mov	r25, r24
     710:	9b 7f       	andi	r25, 0xFB	; 251
     712:	90 93 e8 00 	sts	0x00E8, r25
     716:	8f 77       	andi	r24, 0x7F	; 127
     718:	80 93 e8 00 	sts	0x00E8, r24
     71c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     71e:	80 91 1a 01 	lds	r24, 0x011A
     722:	88 23       	and	r24, r24
     724:	69 f0       	breq	.+26     	; 0x740 <Endpoint_ClearStatusStage+0x50>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     726:	80 91 e8 00 	lds	r24, 0x00E8
     72a:	80 ff       	sbrs	r24, 0
     72c:	f8 cf       	rjmp	.-16     	; 0x71e <Endpoint_ClearStatusStage+0x2e>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}
		
		Endpoint_ClearIN();
     72e:	80 91 e8 00 	lds	r24, 0x00E8
     732:	98 2f       	mov	r25, r24
     734:	9e 7f       	andi	r25, 0xFE	; 254
     736:	90 93 e8 00 	sts	0x00E8, r25
     73a:	8f 77       	andi	r24, 0x7F	; 127
     73c:	80 93 e8 00 	sts	0x00E8, r24
     740:	08 95       	ret

00000742 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     742:	94 e6       	ldi	r25, 0x64	; 100
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     744:	80 91 ec 00 	lds	r24, 0x00EC
     748:	80 ff       	sbrs	r24, 0
     74a:	05 c0       	rjmp	.+10     	; 0x756 <Endpoint_WaitUntilReady+0x14>
		{
			if (Endpoint_IsINReady())
     74c:	80 91 e8 00 	lds	r24, 0x00E8
     750:	80 ff       	sbrs	r24, 0
     752:	05 c0       	rjmp	.+10     	; 0x75e <Endpoint_WaitUntilReady+0x1c>
     754:	1f c0       	rjmp	.+62     	; 0x794 <Endpoint_WaitUntilReady+0x52>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     756:	80 91 e8 00 	lds	r24, 0x00E8
     75a:	82 fd       	sbrc	r24, 2
     75c:	1b c0       	rjmp	.+54     	; 0x794 <Endpoint_WaitUntilReady+0x52>
			  return ENDPOINT_READYWAIT_NoError;		
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     75e:	80 91 1a 01 	lds	r24, 0x011A
     762:	88 23       	and	r24, r24
     764:	11 f4       	brne	.+4      	; 0x76a <Endpoint_WaitUntilReady+0x28>
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (Endpoint_IsStalled())
     76a:	80 91 eb 00 	lds	r24, 0x00EB
     76e:	85 ff       	sbrs	r24, 5
     770:	02 c0       	rjmp	.+4      	; 0x776 <Endpoint_WaitUntilReady+0x34>
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
     776:	80 91 e1 00 	lds	r24, 0x00E1
     77a:	82 ff       	sbrs	r24, 2
     77c:	e3 cf       	rjmp	.-58     	; 0x744 <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
     77e:	80 91 e1 00 	lds	r24, 0x00E1
     782:	8b 7f       	andi	r24, 0xFB	; 251
     784:	80 93 e1 00 	sts	0x00E1, r24

			if (!(TimeoutMSRem--))
     788:	99 23       	and	r25, r25
     78a:	11 f4       	brne	.+4      	; 0x790 <Endpoint_WaitUntilReady+0x4e>
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	08 95       	ret
     790:	91 50       	subi	r25, 0x01	; 1
     792:	d8 cf       	rjmp	.-80     	; 0x744 <Endpoint_WaitUntilReady+0x2>
     794:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     796:	08 95       	ret

00000798 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	18 2f       	mov	r17, r24
     7a8:	09 2f       	mov	r16, r25
     7aa:	eb 01       	movw	r28, r22
     7ac:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     7ae:	c9 df       	rcall	.-110    	; 0x742 <Endpoint_WaitUntilReady>
     7b0:	d8 2e       	mov	r13, r24
     7b2:	88 23       	and	r24, r24
     7b4:	39 f5       	brne	.+78     	; 0x804 <Endpoint_Write_Stream_LE+0x6c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     7b6:	81 2f       	mov	r24, r17
     7b8:	90 2f       	mov	r25, r16
     7ba:	9c 01       	movw	r18, r24
     7bc:	89 01       	movw	r16, r18
     7be:	20 c0       	rjmp	.+64     	; 0x800 <Endpoint_Write_Stream_LE+0x68>
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     7c0:	80 91 e8 00 	lds	r24, 0x00E8
     7c4:	85 fd       	sbrc	r24, 5
     7c6:	16 c0       	rjmp	.+44     	; 0x7f4 <Endpoint_Write_Stream_LE+0x5c>
		{
			TEMPLATE_CLEAR_ENDPOINT();
     7c8:	80 91 e8 00 	lds	r24, 0x00E8
     7cc:	98 2f       	mov	r25, r24
     7ce:	9e 7f       	andi	r25, 0xFE	; 254
     7d0:	90 93 e8 00 	sts	0x00E8, r25
     7d4:	8f 77       	andi	r24, 0x7F	; 127
     7d6:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
     7da:	e1 14       	cp	r14, r1
     7dc:	f1 04       	cpc	r15, r1
     7de:	31 f0       	breq	.+12     	; 0x7ec <Endpoint_Write_Stream_LE+0x54>
     7e0:	f7 01       	movw	r30, r14
     7e2:	09 95       	icall
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	11 f4       	brne	.+4      	; 0x7ec <Endpoint_Write_Stream_LE+0x54>
     7e8:	84 e0       	ldi	r24, 0x04	; 4
     7ea:	0d c0       	rjmp	.+26     	; 0x806 <Endpoint_Write_Stream_LE+0x6e>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     7ec:	aa df       	rcall	.-172    	; 0x742 <Endpoint_WaitUntilReady>
     7ee:	88 23       	and	r24, r24
     7f0:	39 f0       	breq	.+14     	; 0x800 <Endpoint_Write_Stream_LE+0x68>
     7f2:	09 c0       	rjmp	.+18     	; 0x806 <Endpoint_Write_Stream_LE+0x6e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     7f4:	f8 01       	movw	r30, r16
     7f6:	81 91       	ld	r24, Z+
     7f8:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     7fa:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
     7fe:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);	
		}
	}
	#endif

	while (Length)
     800:	20 97       	sbiw	r28, 0x00	; 0
     802:	f1 f6       	brne	.-68     	; 0x7c0 <Endpoint_Write_Stream_LE+0x28>
     804:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	08 95       	ret

00000816 <Endpoint_Write_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
     816:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
     818:	40 91 21 01 	lds	r20, 0x0121
     81c:	50 91 22 01 	lds	r21, 0x0122
     820:	46 17       	cp	r20, r22
     822:	57 07       	cpc	r21, r23
     824:	18 f4       	brcc	.+6      	; 0x82c <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     826:	f9 01       	movw	r30, r18
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	43 c0       	rjmp	.+134    	; 0x8b2 <Endpoint_Write_Control_Stream_LE+0x9c>
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     82c:	61 15       	cp	r22, r1
     82e:	71 05       	cpc	r23, r1
     830:	11 f0       	breq	.+4      	; 0x836 <Endpoint_Write_Control_Stream_LE+0x20>
     832:	ab 01       	movw	r20, r22
     834:	f8 cf       	rjmp	.-16     	; 0x826 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();
     836:	80 91 e8 00 	lds	r24, 0x00E8
     83a:	98 2f       	mov	r25, r24
     83c:	9e 7f       	andi	r25, 0xFE	; 254
     83e:	90 93 e8 00 	sts	0x00E8, r25
     842:	8f 77       	andi	r24, 0x7F	; 127
     844:	80 93 e8 00 	sts	0x00E8, r24
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	ec cf       	rjmp	.-40     	; 0x826 <Endpoint_Write_Control_Stream_LE+0x10>

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     84e:	80 91 e8 00 	lds	r24, 0x00E8
     852:	83 ff       	sbrs	r24, 3
     854:	02 c0       	rjmp	.+4      	; 0x85a <Endpoint_Write_Control_Stream_LE+0x44>
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     85a:	80 91 e8 00 	lds	r24, 0x00E8
     85e:	82 fd       	sbrc	r24, 2
     860:	32 c0       	rjmp	.+100    	; 0x8c6 <Endpoint_Write_Control_Stream_LE+0xb0>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     862:	80 91 1a 01 	lds	r24, 0x011A
     866:	88 23       	and	r24, r24
     868:	a1 f1       	breq	.+104    	; 0x8d2 <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
     86a:	80 91 e8 00 	lds	r24, 0x00E8
     86e:	80 ff       	sbrs	r24, 0
     870:	20 c0       	rjmp	.+64     	; 0x8b2 <Endpoint_Write_Control_Stream_LE+0x9c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
     872:	20 91 f2 00 	lds	r18, 0x00F2
     876:	30 91 f3 00 	lds	r19, 0x00F3
     87a:	07 c0       	rjmp	.+14     	; 0x88a <Endpoint_Write_Control_Stream_LE+0x74>
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     87c:	81 91       	ld	r24, Z+
     87e:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     882:	41 50       	subi	r20, 0x01	; 1
     884:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     886:	2f 5f       	subi	r18, 0xFF	; 255
     888:	3f 4f       	sbci	r19, 0xFF	; 255
		  
		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     88a:	41 15       	cp	r20, r1
     88c:	51 05       	cpc	r21, r1
     88e:	19 f0       	breq	.+6      	; 0x896 <Endpoint_Write_Control_Stream_LE+0x80>
     890:	28 30       	cpi	r18, 0x08	; 8
     892:	31 05       	cpc	r19, r1
     894:	98 f3       	brcs	.-26     	; 0x87c <Endpoint_Write_Control_Stream_LE+0x66>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	28 30       	cpi	r18, 0x08	; 8
     89a:	31 05       	cpc	r19, r1
     89c:	09 f4       	brne	.+2      	; 0x8a0 <Endpoint_Write_Control_Stream_LE+0x8a>
     89e:	61 e0       	ldi	r22, 0x01	; 1
			Endpoint_ClearIN();
     8a0:	80 91 e8 00 	lds	r24, 0x00E8
     8a4:	98 2f       	mov	r25, r24
     8a6:	9e 7f       	andi	r25, 0xFE	; 254
     8a8:	90 93 e8 00 	sts	0x00E8, r25
     8ac:	8f 77       	andi	r24, 0x7F	; 127
     8ae:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     8b2:	41 15       	cp	r20, r1
     8b4:	51 05       	cpc	r21, r1
     8b6:	59 f6       	brne	.-106    	; 0x84e <Endpoint_Write_Control_Stream_LE+0x38>
     8b8:	66 23       	and	r22, r22
     8ba:	49 f6       	brne	.-110    	; 0x84e <Endpoint_Write_Control_Stream_LE+0x38>
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <Endpoint_Write_Control_Stream_LE+0xb0>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     8be:	80 91 1a 01 	lds	r24, 0x011A
     8c2:	88 23       	and	r24, r24
     8c4:	31 f0       	breq	.+12     	; 0x8d2 <Endpoint_Write_Control_Stream_LE+0xbc>
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
     8c6:	80 91 e8 00 	lds	r24, 0x00E8
     8ca:	82 ff       	sbrs	r24, 2
     8cc:	f8 cf       	rjmp	.-16     	; 0x8be <Endpoint_Write_Control_Stream_LE+0xa8>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret
     8d2:	82 e0       	ldi	r24, 0x02	; 2
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;	
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8d4:	08 95       	ret

000008d6 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
     8d6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
     8d8:	40 91 21 01 	lds	r20, 0x0121
     8dc:	50 91 22 01 	lds	r21, 0x0122
     8e0:	46 17       	cp	r20, r22
     8e2:	57 07       	cpc	r21, r23
     8e4:	10 f4       	brcc	.+4      	; 0x8ea <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	44 c0       	rjmp	.+136    	; 0x972 <Endpoint_Write_Control_PStream_LE+0x9c>
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8ea:	61 15       	cp	r22, r1
     8ec:	71 05       	cpc	r23, r1
     8ee:	11 f0       	breq	.+4      	; 0x8f4 <Endpoint_Write_Control_PStream_LE+0x1e>
     8f0:	ab 01       	movw	r20, r22
     8f2:	f9 cf       	rjmp	.-14     	; 0x8e6 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();
     8f4:	80 91 e8 00 	lds	r24, 0x00E8
     8f8:	98 2f       	mov	r25, r24
     8fa:	9e 7f       	andi	r25, 0xFE	; 254
     8fc:	90 93 e8 00 	sts	0x00E8, r25
     900:	8f 77       	andi	r24, 0x7F	; 127
     902:	80 93 e8 00 	sts	0x00E8, r24
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	ed cf       	rjmp	.-38     	; 0x8e6 <Endpoint_Write_Control_PStream_LE+0x10>

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     90c:	80 91 e8 00 	lds	r24, 0x00E8
     910:	83 ff       	sbrs	r24, 3
     912:	02 c0       	rjmp	.+4      	; 0x918 <Endpoint_Write_Control_PStream_LE+0x42>
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     918:	80 91 e8 00 	lds	r24, 0x00E8
     91c:	82 fd       	sbrc	r24, 2
     91e:	33 c0       	rjmp	.+102    	; 0x986 <Endpoint_Write_Control_PStream_LE+0xb0>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     920:	80 91 1a 01 	lds	r24, 0x011A
     924:	88 23       	and	r24, r24
     926:	a9 f1       	breq	.+106    	; 0x992 <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
     928:	80 91 e8 00 	lds	r24, 0x00E8
     92c:	80 ff       	sbrs	r24, 0
     92e:	21 c0       	rjmp	.+66     	; 0x972 <Endpoint_Write_Control_PStream_LE+0x9c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
     930:	80 91 f2 00 	lds	r24, 0x00F2
     934:	90 91 f3 00 	lds	r25, 0x00F3
     938:	09 c0       	rjmp	.+18     	; 0x94c <Endpoint_Write_Control_PStream_LE+0x76>
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     93a:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     93c:	2f 5f       	subi	r18, 0xFF	; 255
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
     940:	e4 91       	lpm	r30, Z+
     942:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
     946:	41 50       	subi	r20, 0x01	; 1
     948:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     94a:	01 96       	adiw	r24, 0x01	; 1
		  
		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     94c:	41 15       	cp	r20, r1
     94e:	51 05       	cpc	r21, r1
     950:	19 f0       	breq	.+6      	; 0x958 <Endpoint_Write_Control_PStream_LE+0x82>
     952:	88 30       	cpi	r24, 0x08	; 8
     954:	91 05       	cpc	r25, r1
     956:	88 f3       	brcs	.-30     	; 0x93a <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	08 97       	sbiw	r24, 0x08	; 8
     95c:	09 f4       	brne	.+2      	; 0x960 <Endpoint_Write_Control_PStream_LE+0x8a>
     95e:	61 e0       	ldi	r22, 0x01	; 1
			Endpoint_ClearIN();
     960:	80 91 e8 00 	lds	r24, 0x00E8
     964:	98 2f       	mov	r25, r24
     966:	9e 7f       	andi	r25, 0xFE	; 254
     968:	90 93 e8 00 	sts	0x00E8, r25
     96c:	8f 77       	andi	r24, 0x7F	; 127
     96e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     972:	41 15       	cp	r20, r1
     974:	51 05       	cpc	r21, r1
     976:	51 f6       	brne	.-108    	; 0x90c <Endpoint_Write_Control_PStream_LE+0x36>
     978:	66 23       	and	r22, r22
     97a:	41 f6       	brne	.-112    	; 0x90c <Endpoint_Write_Control_PStream_LE+0x36>
     97c:	04 c0       	rjmp	.+8      	; 0x986 <Endpoint_Write_Control_PStream_LE+0xb0>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     97e:	80 91 1a 01 	lds	r24, 0x011A
     982:	88 23       	and	r24, r24
     984:	31 f0       	breq	.+12     	; 0x992 <Endpoint_Write_Control_PStream_LE+0xbc>
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
     986:	80 91 e8 00 	lds	r24, 0x00E8
     98a:	82 ff       	sbrs	r24, 2
     98c:	f8 cf       	rjmp	.-16     	; 0x97e <Endpoint_Write_Control_PStream_LE+0xa8>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	08 95       	ret
     992:	82 e0       	ldi	r24, 0x02	; 2
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;	
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     994:	08 95       	ret

00000996 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer, uint16_t Length)
{
     996:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
     998:	61 15       	cp	r22, r1
     99a:	71 05       	cpc	r23, r1
     99c:	49 f4       	brne	.+18     	; 0x9b0 <Endpoint_Read_Control_Stream_LE+0x1a>
	  Endpoint_ClearOUT();
     99e:	80 91 e8 00 	lds	r24, 0x00E8
     9a2:	98 2f       	mov	r25, r24
     9a4:	9b 7f       	andi	r25, 0xFB	; 251
     9a6:	90 93 e8 00 	sts	0x00E8, r25
     9aa:	8f 77       	andi	r24, 0x7F	; 127
     9ac:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer, uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9b0:	f9 01       	movw	r30, r18
     9b2:	24 c0       	rjmp	.+72     	; 0x9fc <Endpoint_Read_Control_Stream_LE+0x66>
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
     9b4:	80 91 e8 00 	lds	r24, 0x00E8
     9b8:	83 ff       	sbrs	r24, 3
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <Endpoint_Read_Control_Stream_LE+0x2a>
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
     9c0:	80 91 1a 01 	lds	r24, 0x011A
     9c4:	88 23       	and	r24, r24
     9c6:	41 f1       	breq	.+80     	; 0xa18 <Endpoint_Read_Control_Stream_LE+0x82>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsOUTReceived())
     9c8:	80 91 e8 00 	lds	r24, 0x00E8
     9cc:	82 ff       	sbrs	r24, 2
     9ce:	f2 cf       	rjmp	.-28     	; 0x9b4 <Endpoint_Read_Control_Stream_LE+0x1e>
     9d0:	06 c0       	rjmp	.+12     	; 0x9de <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     9d2:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     9d6:	81 93       	st	Z+, r24
				Length--;
     9d8:	61 50       	subi	r22, 0x01	; 1
     9da:	70 40       	sbci	r23, 0x00	; 0
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     9dc:	31 f0       	breq	.+12     	; 0x9ea <Endpoint_Read_Control_Stream_LE+0x54>
     9de:	80 91 f2 00 	lds	r24, 0x00F2
     9e2:	90 91 f3 00 	lds	r25, 0x00F3
     9e6:	89 2b       	or	r24, r25
     9e8:	a1 f7       	brne	.-24     	; 0x9d2 <Endpoint_Read_Control_Stream_LE+0x3c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
			}
			
			Endpoint_ClearOUT();
     9ea:	80 91 e8 00 	lds	r24, 0x00E8
     9ee:	98 2f       	mov	r25, r24
     9f0:	9b 7f       	andi	r25, 0xFB	; 251
     9f2:	90 93 e8 00 	sts	0x00E8, r25
     9f6:	8f 77       	andi	r24, 0x7F	; 127
     9f8:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
     9fc:	61 15       	cp	r22, r1
     9fe:	71 05       	cpc	r23, r1
     a00:	c9 f6       	brne	.-78     	; 0x9b4 <Endpoint_Read_Control_Stream_LE+0x1e>
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <Endpoint_Read_Control_Stream_LE+0x76>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     a04:	80 91 1a 01 	lds	r24, 0x011A
     a08:	88 23       	and	r24, r24
     a0a:	31 f0       	breq	.+12     	; 0xa18 <Endpoint_Read_Control_Stream_LE+0x82>
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
     a0c:	80 91 e8 00 	lds	r24, 0x00E8
     a10:	80 ff       	sbrs	r24, 0
     a12:	f8 cf       	rjmp	.-16     	; 0xa04 <Endpoint_Read_Control_Stream_LE+0x6e>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	08 95       	ret
     a18:	82 e0       	ldi	r24, 0x02	; 2
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
     a1a:	08 95       	ret

00000a1c <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
     a1c:	59 d0       	rcall	.+178    	; 0xad0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a1e:	60 d0       	rcall	.+192    	; 0xae0 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
     a20:	10 92 1a 01 	sts	0x011A, r1
	USB_ConfigurationNumber  = 0;
     a24:	10 92 18 01 	sts	0x0118, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		USB_RemoteWakeupEnabled  = false;
     a28:	10 92 17 01 	sts	0x0117, r1
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
		USB_CurrentlySelfPowered = false;
     a2c:	10 92 16 01 	sts	0x0116, r1
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
     a30:	8c e0       	ldi	r24, 0x0C	; 12
     a32:	89 bd       	out	0x29, r24	; 41
     a34:	89 b5       	in	r24, 0x29	; 41
     a36:	82 60       	ori	r24, 0x02	; 2
     a38:	89 bd       	out	0x29, r24	; 41
		while (!(USB_PLL_IsReady()));
     a3a:	09 b4       	in	r0, 0x29	; 41
     a3c:	00 fe       	sbrs	r0, 0
     a3e:	fd cf       	rjmp	.-6      	; 0xa3a <USB_ResetInterface+0x1e>
	}
	
	USB_Controller_Reset();
     a40:	80 91 d8 00 	lds	r24, 0x00D8
     a44:	98 2f       	mov	r25, r24
     a46:	9f 77       	andi	r25, 0x7F	; 127
     a48:	90 93 d8 00 	sts	0x00D8, r25
     a4c:	80 68       	ori	r24, 0x80	; 128
     a4e:	80 93 d8 00 	sts	0x00D8, r24
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	#endif
		
	if (!(USB_Options & USB_OPT_REG_DISABLED))
	  USB_REG_On();
     a52:	80 91 d7 00 	lds	r24, 0x00D7
     a56:	81 60       	ori	r24, 0x01	; 1
     a58:	80 93 d7 00 	sts	0x00D7, r24
	else
	  USB_REG_Off();
	
	USB_CLK_Unfreeze();
     a5c:	80 91 d8 00 	lds	r24, 0x00D8
     a60:	8f 7d       	andi	r24, 0xDF	; 223
     a62:	80 93 d8 00 	sts	0x00D8, r24
	if (USB_CurrentMode == USB_MODE_DEVICE)
	{
		if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
		  USB_Device_SetLowSpeed();
		else
		  USB_Device_SetFullSpeed();
     a66:	80 91 e0 00 	lds	r24, 0x00E0
     a6a:	8b 7f       	andi	r24, 0xFB	; 251
     a6c:	80 93 e0 00 	sts	0x00E0, r24
			#endif
		}
	}
	#endif

	USB_Attach();
     a70:	80 91 e0 00 	lds	r24, 0x00E0
     a74:	8e 7f       	andi	r24, 0xFE	; 254
     a76:	80 93 e0 00 	sts	0x00E0, r24
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
     a7a:	80 91 e1 00 	lds	r24, 0x00E1
     a7e:	8e 7f       	andi	r24, 0xFE	; 254
     a80:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPEND);
     a84:	80 91 e2 00 	lds	r24, 0x00E2
     a88:	81 60       	ori	r24, 0x01	; 1
     a8a:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Clear(USB_INT_EORSTI);
     a8e:	80 91 e1 00 	lds	r24, 0x00E1
     a92:	87 7f       	andi	r24, 0xF7	; 247
     a94:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_EORSTI);
     a98:	80 91 e2 00 	lds	r24, 0x00E2
     a9c:	88 60       	ori	r24, 0x08	; 8
     a9e:	80 93 e2 00 	sts	0x00E2, r24

		#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
		USB_INT_Enable(USB_INT_VBUS);
     aa2:	80 91 d8 00 	lds	r24, 0x00D8
     aa6:	81 60       	ori	r24, 0x01	; 1
     aa8:	80 93 d8 00 	sts	0x00D8, r24
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
     aac:	08 95       	ret

00000aae <USB_Init>:
	#if defined(USB_CAN_BE_HOST)
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
	#endif
	
	#if defined(USB_DEVICE_ONLY) && (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	UHWCON |= (1 << UIMOD);
     aae:	e7 ed       	ldi	r30, 0xD7	; 215
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	80 68       	ori	r24, 0x80	; 128
     ab6:	80 83       	st	Z, r24
		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
		return;
	}
	#endif
	
	USB_ResetInterface();
     ab8:	b1 df       	rcall	.-158    	; 0xa1c <USB_ResetInterface>

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
     aba:	e8 ed       	ldi	r30, 0xD8	; 216
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	80 61       	ori	r24, 0x10	; 16
     ac2:	80 83       	st	Z, r24
	#endif

	USB_IsInitialized = true;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 19 01 	sts	0x0119, r24

	sei();
     aca:	78 94       	sei
}
     acc:	08 95       	ret

00000ace <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ace:	08 95       	ret

00000ad0 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));				
     ad0:	e8 ed       	ldi	r30, 0xD8	; 216
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	8c 7f       	andi	r24, 0xFC	; 252
     ad8:	80 83       	st	Z, r24
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     ada:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     ade:	08 95       	ret

00000ae0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     ae0:	10 92 da 00 	sts	0x00DA, r1
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     ae4:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     ae8:	08 95       	ret

00000aea <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     aea:	1f 92       	push	r1
     aec:	0f 92       	push	r0
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	0f 92       	push	r0
     af2:	0b b6       	in	r0, 0x3b	; 59
     af4:	0f 92       	push	r0
     af6:	11 24       	eor	r1, r1
     af8:	2f 93       	push	r18
     afa:	3f 93       	push	r19
     afc:	4f 93       	push	r20
     afe:	5f 93       	push	r21
     b00:	6f 93       	push	r22
     b02:	7f 93       	push	r23
     b04:	8f 93       	push	r24
     b06:	9f 93       	push	r25
     b08:	af 93       	push	r26
     b0a:	bf 93       	push	r27
     b0c:	ef 93       	push	r30
     b0e:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
     b10:	80 91 da 00 	lds	r24, 0x00DA
     b14:	80 ff       	sbrs	r24, 0
     b16:	15 c0       	rjmp	.+42     	; 0xb42 <__vector_10+0x58>
     b18:	80 91 d8 00 	lds	r24, 0x00D8
     b1c:	80 ff       	sbrs	r24, 0
     b1e:	11 c0       	rjmp	.+34     	; 0xb42 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
     b20:	80 91 da 00 	lds	r24, 0x00DA
     b24:	8e 7f       	andi	r24, 0xFE	; 254
     b26:	80 93 da 00 	sts	0x00DA, r24

		if (USB_VBUS_GetStatus())
     b2a:	80 91 d9 00 	lds	r24, 0x00D9
     b2e:	80 ff       	sbrs	r24, 0
     b30:	05 c0       	rjmp	.+10     	; 0xb3c <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 1a 01 	sts	0x011A, r24
			EVENT_USB_Device_Connect();
     b38:	4c db       	rcall	.-2408   	; 0x1d2 <EVENT_USB_Device_Connect>
     b3a:	03 c0       	rjmp	.+6      	; 0xb42 <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;		
     b3c:	10 92 1a 01 	sts	0x011A, r1
			EVENT_USB_Device_Disconnect();
     b40:	4d db       	rcall	.-2406   	; 0x1dc <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
     b42:	80 91 e1 00 	lds	r24, 0x00E1
     b46:	80 ff       	sbrs	r24, 0
     b48:	1d c0       	rjmp	.+58     	; 0xb84 <__vector_10+0x9a>
     b4a:	80 91 e2 00 	lds	r24, 0x00E2
     b4e:	80 ff       	sbrs	r24, 0
     b50:	19 c0       	rjmp	.+50     	; 0xb84 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
     b52:	80 91 e1 00 	lds	r24, 0x00E1
     b56:	8e 7f       	andi	r24, 0xFE	; 254
     b58:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
     b5c:	80 91 e2 00 	lds	r24, 0x00E2
     b60:	8e 7f       	andi	r24, 0xFE	; 254
     b62:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
     b66:	80 91 e2 00 	lds	r24, 0x00E2
     b6a:	80 61       	ori	r24, 0x10	; 16
     b6c:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_CLK_Freeze();
     b70:	80 91 d8 00 	lds	r24, 0x00D8
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	80 93 d8 00 	sts	0x00D8, r24
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();
     b7a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     b7c:	85 e0       	ldi	r24, 0x05	; 5
     b7e:	80 93 1a 01 	sts	0x011A, r24
		EVENT_USB_Device_Suspend();
     b82:	a5 df       	rcall	.-182    	; 0xace <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
     b84:	80 91 e1 00 	lds	r24, 0x00E1
     b88:	84 ff       	sbrs	r24, 4
     b8a:	2a c0       	rjmp	.+84     	; 0xbe0 <__vector_10+0xf6>
     b8c:	80 91 e2 00 	lds	r24, 0x00E2
     b90:	84 ff       	sbrs	r24, 4
     b92:	26 c0       	rjmp	.+76     	; 0xbe0 <__vector_10+0xf6>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
     b94:	8c e0       	ldi	r24, 0x0C	; 12
     b96:	89 bd       	out	0x29, r24	; 41
     b98:	89 b5       	in	r24, 0x29	; 41
     b9a:	82 60       	ori	r24, 0x02	; 2
     b9c:	89 bd       	out	0x29, r24	; 41
			while (!(USB_PLL_IsReady()));
     b9e:	09 b4       	in	r0, 0x29	; 41
     ba0:	00 fe       	sbrs	r0, 0
     ba2:	fd cf       	rjmp	.-6      	; 0xb9e <__vector_10+0xb4>
		}

		USB_CLK_Unfreeze();
     ba4:	80 91 d8 00 	lds	r24, 0x00D8
     ba8:	8f 7d       	andi	r24, 0xDF	; 223
     baa:	80 93 d8 00 	sts	0x00D8, r24

		USB_INT_Clear(USB_INT_WAKEUP);
     bae:	80 91 e1 00 	lds	r24, 0x00E1
     bb2:	8f 7e       	andi	r24, 0xEF	; 239
     bb4:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
     bb8:	80 91 e2 00 	lds	r24, 0x00E2
     bbc:	8f 7e       	andi	r24, 0xEF	; 239
     bbe:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
     bc2:	80 91 e2 00 	lds	r24, 0x00E2
     bc6:	81 60       	ori	r24, 0x01	; 1
     bc8:	80 93 e2 00 	sts	0x00E2, r24
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
		EVENT_USB_Device_Connect();
		#else
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
     bcc:	80 91 18 01 	lds	r24, 0x0118
     bd0:	88 23       	and	r24, r24
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <__vector_10+0xee>
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <__vector_10+0xf0>
     bd8:	84 e0       	ldi	r24, 0x04	; 4
     bda:	80 93 1a 01 	sts	0x011A, r24
		EVENT_USB_Device_WakeUp();		
     bde:	77 df       	rcall	.-274    	; 0xace <USB_Event_Stub>
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     be0:	80 91 e1 00 	lds	r24, 0x00E1
     be4:	83 ff       	sbrs	r24, 3
     be6:	23 c0       	rjmp	.+70     	; 0xc2e <__vector_10+0x144>
     be8:	80 91 e2 00 	lds	r24, 0x00E2
     bec:	83 ff       	sbrs	r24, 3
     bee:	1f c0       	rjmp	.+62     	; 0xc2e <__vector_10+0x144>
	{
		USB_INT_Clear(USB_INT_EORSTI);
     bf0:	80 91 e1 00 	lds	r24, 0x00E1
     bf4:	87 7f       	andi	r24, 0xF7	; 247
     bf6:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	80 93 1a 01 	sts	0x011A, r24
		USB_ConfigurationNumber = 0;
     c00:	10 92 18 01 	sts	0x0118, r1

		USB_INT_Clear(USB_INT_SUSPEND);
     c04:	80 91 e1 00 	lds	r24, 0x00E1
     c08:	8e 7f       	andi	r24, 0xFE	; 254
     c0a:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPEND);
     c0e:	80 91 e2 00 	lds	r24, 0x00E2
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
     c18:	80 91 e2 00 	lds	r24, 0x00E2
     c1c:	80 61       	ori	r24, 0x10	; 16
     c1e:	80 93 e2 00 	sts	0x00E2, r24

		Endpoint_ClearEndpoints();
     c22:	4f dd       	rcall	.-1378   	; 0x6c2 <Endpoint_ClearEndpoints>

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	42 e0       	ldi	r20, 0x02	; 2
     c2a:	38 dd       	rcall	.-1424   	; 0x69c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     c2c:	50 df       	rcall	.-352    	; 0xace <USB_Event_Stub>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     c2e:	80 91 e1 00 	lds	r24, 0x00E1
     c32:	82 ff       	sbrs	r24, 2
     c34:	0a c0       	rjmp	.+20     	; 0xc4a <__vector_10+0x160>
     c36:	80 91 e2 00 	lds	r24, 0x00E2
     c3a:	82 ff       	sbrs	r24, 2
     c3c:	06 c0       	rjmp	.+12     	; 0xc4a <__vector_10+0x160>
	{
		USB_INT_Clear(USB_INT_SOFI);
     c3e:	80 91 e1 00 	lds	r24, 0x00E1
     c42:	8b 7f       	andi	r24, 0xFB	; 251
     c44:	80 93 e1 00 	sts	0x00E1, r24
		
		EVENT_USB_Device_StartOfFrame();
     c48:	ce da       	rcall	.-2660   	; 0x1e6 <EVENT_USB_Device_StartOfFrame>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
     c4a:	ff 91       	pop	r31
     c4c:	ef 91       	pop	r30
     c4e:	bf 91       	pop	r27
     c50:	af 91       	pop	r26
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	0b be       	out	0x3b, r0	; 59
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c70:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     c72:	80 91 1a 01 	lds	r24, 0x011A
     c76:	88 23       	and	r24, r24
     c78:	61 f0       	breq	.+24     	; 0xc92 <USB_USBTask+0x22>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
     c7a:	10 91 e9 00 	lds	r17, 0x00E9
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     c7e:	10 92 e9 00 	sts	0x00E9, r1

		if (Endpoint_IsSETUPReceived())
     c82:	80 91 e8 00 	lds	r24, 0x00E8
     c86:	83 ff       	sbrs	r24, 3
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
     c8a:	9a db       	rcall	.-2252   	; 0x3c0 <USB_Device_ProcessControlRequest>
#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
     c8c:	17 70       	andi	r17, 0x07	; 7
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
		  USB_Device_ProcessControlRequest();
		
		Endpoint_SelectEndpoint(PrevEndpoint);
     c8e:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
     c92:	1f 91       	pop	r17
     c94:	08 95       	ret

00000c96 <HID_Device_USBTask>:
	
	return true;
}
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     c96:	2f 92       	push	r2
     c98:	3f 92       	push	r3
     c9a:	4f 92       	push	r4
     c9c:	5f 92       	push	r5
     c9e:	6f 92       	push	r6
     ca0:	7f 92       	push	r7
     ca2:	8f 92       	push	r8
     ca4:	9f 92       	push	r9
     ca6:	af 92       	push	r10
     ca8:	bf 92       	push	r11
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	00 d0       	rcall	.+0      	; 0xcbc <HID_Device_USBTask+0x26>
     cbc:	0f 92       	push	r0
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
			
			Endpoint_ClearIN();
		}
	}
}
     cc4:	4d b6       	in	r4, 0x3d	; 61
     cc6:	5e b6       	in	r5, 0x3e	; 62
	return true;
}
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     cc8:	80 91 1a 01 	lds	r24, 0x011A
     ccc:	84 30       	cpi	r24, 0x04	; 4
     cce:	09 f0       	breq	.+2      	; 0xcd2 <HID_Device_USBTask+0x3c>
     cd0:	89 c0       	rjmp	.+274    	; 0xde4 <HID_Device_USBTask+0x14e>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     cd2:	f7 01       	movw	r30, r14
     cd4:	81 81       	ldd	r24, Z+1	; 0x01
     cd6:	80 93 e9 00 	sts	0x00E9, r24
	
	if (Endpoint_IsReadWriteAllowed())
     cda:	80 91 e8 00 	lds	r24, 0x00E8
     cde:	85 ff       	sbrs	r24, 5
     ce0:	81 c0       	rjmp	.+258    	; 0xde4 <HID_Device_USBTask+0x14e>
     ce2:	3d b6       	in	r3, 0x3d	; 61
     ce4:	2e b6       	in	r2, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     ce6:	47 81       	ldd	r20, Z+7	; 0x07
     ce8:	8d b7       	in	r24, 0x3d	; 61
     cea:	9e b7       	in	r25, 0x3e	; 62
     cec:	84 1b       	sub	r24, r20
     cee:	91 09       	sbc	r25, r1
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	9e bf       	out	0x3e, r25	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	8d bf       	out	0x3d, r24	; 61
     cfa:	0d b7       	in	r16, 0x3d	; 61
     cfc:	1e b7       	in	r17, 0x3e	; 62
     cfe:	0f 5f       	subi	r16, 0xFF	; 255
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
     d02:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
     d04:	1b 82       	std	Y+3, r1	; 0x03
     d06:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
     d08:	80 2e       	mov	r8, r16
     d0a:	71 2e       	mov	r7, r17
     d0c:	c8 01       	movw	r24, r16
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	57 da       	rcall	.-2898   	; 0x1c4 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
		                                                             ReportINData, &ReportINSize);
     d16:	c7 01       	movw	r24, r14
     d18:	be 01       	movw	r22, r28
     d1a:	6f 5f       	subi	r22, 0xFF	; 255
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	98 01       	movw	r18, r16
     d22:	8e 01       	movw	r16, r28
     d24:	0e 5f       	subi	r16, 0xFE	; 254
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	6a da       	rcall	.-2860   	; 0x1fe <CALLBACK_HID_Device_CreateHIDReport>
     d2a:	68 2e       	mov	r6, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     d2c:	f7 01       	movw	r30, r14
     d2e:	81 85       	ldd	r24, Z+9	; 0x09
     d30:	92 85       	ldd	r25, Z+10	; 0x0a
     d32:	89 2b       	or	r24, r25
     d34:	19 f4       	brne	.+6      	; 0xd3c <HID_Device_USBTask+0xa6>
     d36:	aa 24       	eor	r10, r10
     d38:	bb 24       	eor	r11, r11
     d3a:	0b c0       	rjmp	.+22     	; 0xd52 <HID_Device_USBTask+0xbc>
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	f7 01       	movw	r30, r14
     d40:	83 85       	ldd	r24, Z+11	; 0x0b
     d42:	94 85       	ldd	r25, Z+12	; 0x0c
     d44:	89 2b       	or	r24, r25
     d46:	09 f0       	breq	.+2      	; 0xd4a <HID_Device_USBTask+0xb4>
     d48:	21 e0       	ldi	r18, 0x01	; 1
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	28 27       	eor	r18, r24
     d4e:	a2 2e       	mov	r10, r18
     d50:	bb 24       	eor	r11, r11
		
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     d52:	f7 01       	movw	r30, r14
     d54:	05 81       	ldd	r16, Z+5	; 0x05
     d56:	16 81       	ldd	r17, Z+6	; 0x06
     d58:	01 15       	cp	r16, r1
     d5a:	11 05       	cpc	r17, r1
     d5c:	11 f4       	brne	.+4      	; 0xd62 <HID_Device_USBTask+0xcc>
     d5e:	dd 24       	eor	r13, r13
     d60:	13 c0       	rjmp	.+38     	; 0xd88 <HID_Device_USBTask+0xf2>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     d62:	ca 80       	ldd	r12, Y+2	; 0x02
     d64:	9b 80       	ldd	r9, Y+3	; 0x03
     d66:	88 2d       	mov	r24, r8
     d68:	97 2d       	mov	r25, r7
     d6a:	b8 01       	movw	r22, r16
     d6c:	4c 2d       	mov	r20, r12
     d6e:	59 2d       	mov	r21, r9
     d70:	13 da       	rcall	.-3034   	; 0x198 <memcmp>
     d72:	dd 24       	eor	r13, r13
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	11 f0       	breq	.+4      	; 0xd7c <HID_Device_USBTask+0xe6>
     d78:	dd 24       	eor	r13, r13
     d7a:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, ReportINSize);
     d7c:	c8 01       	movw	r24, r16
     d7e:	68 2d       	mov	r22, r8
     d80:	77 2d       	mov	r23, r7
     d82:	4c 2d       	mov	r20, r12
     d84:	59 2d       	mov	r21, r9
     d86:	15 da       	rcall	.-3030   	; 0x1b2 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     d88:	6a 81       	ldd	r22, Y+2	; 0x02
     d8a:	7b 81       	ldd	r23, Y+3	; 0x03
     d8c:	61 15       	cp	r22, r1
     d8e:	71 05       	cpc	r23, r1
     d90:	09 f1       	breq	.+66     	; 0xdd4 <HID_Device_USBTask+0x13e>
     d92:	66 20       	and	r6, r6
     d94:	21 f4       	brne	.+8      	; 0xd9e <HID_Device_USBTask+0x108>
     d96:	dd 20       	and	r13, r13
     d98:	11 f4       	brne	.+4      	; 0xd9e <HID_Device_USBTask+0x108>
     d9a:	ab 28       	or	r10, r11
     d9c:	d9 f0       	breq	.+54     	; 0xdd4 <HID_Device_USBTask+0x13e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     d9e:	f7 01       	movw	r30, r14
     da0:	81 85       	ldd	r24, Z+9	; 0x09
     da2:	92 85       	ldd	r25, Z+10	; 0x0a
     da4:	94 87       	std	Z+12, r25	; 0x0c
     da6:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     da8:	81 81       	ldd	r24, Z+1	; 0x01
     daa:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	88 23       	and	r24, r24
     db2:	11 f0       	breq	.+4      	; 0xdb8 <HID_Device_USBTask+0x122>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     db4:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
     db8:	88 2d       	mov	r24, r8
     dba:	97 2d       	mov	r25, r7
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	eb dc       	rcall	.-1578   	; 0x798 <Endpoint_Write_Stream_LE>
			
			Endpoint_ClearIN();
     dc2:	80 91 e8 00 	lds	r24, 0x00E8
     dc6:	98 2f       	mov	r25, r24
     dc8:	9e 7f       	andi	r25, 0xFE	; 254
     dca:	90 93 e8 00 	sts	0x00E8, r25
     dce:	8f 77       	andi	r24, 0x7F	; 127
     dd0:	80 93 e8 00 	sts	0x00E8, r24
     dd4:	83 2d       	mov	r24, r3
     dd6:	92 2d       	mov	r25, r2
     dd8:	9c 01       	movw	r18, r24
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	3e bf       	out	0x3e, r19	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	2d bf       	out	0x3d, r18	; 61
		}
	}
}
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	5e be       	out	0x3e, r5	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	4d be       	out	0x3d, r4	; 61
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	7f 90       	pop	r7
     e0e:	6f 90       	pop	r6
     e10:	5f 90       	pop	r5
     e12:	4f 90       	pop	r4
     e14:	3f 90       	pop	r3
     e16:	2f 90       	pop	r2
     e18:	08 95       	ret

00000e1a <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     e24:	08 96       	adiw	r24, 0x08	; 8
     e26:	fc 01       	movw	r30, r24
     e28:	85 e0       	ldi	r24, 0x05	; 5
     e2a:	ef 01       	movw	r28, r30
     e2c:	19 92       	st	Y+, r1
     e2e:	8a 95       	dec	r24
     e30:	e9 f7       	brne	.-6      	; 0xe2c <HID_Device_ConfigureEndpoints+0x12>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	18 96       	adiw	r26, 0x08	; 8
     e36:	8c 93       	st	X, r24
     e38:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount = 500;
     e3a:	84 ef       	ldi	r24, 0xF4	; 244
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	1a 96       	adiw	r26, 0x0a	; 10
     e40:	9c 93       	st	X, r25
     e42:	8e 93       	st	-X, r24
     e44:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	0c 91       	ld	r16, X
     e4a:	11 97       	sbiw	r26, 0x01	; 1
     e4c:	14 96       	adiw	r26, 0x04	; 4
     e4e:	8c 91       	ld	r24, X
     e50:	14 97       	sbiw	r26, 0x04	; 4
     e52:	88 23       	and	r24, r24
     e54:	11 f4       	brne	.+4      	; 0xe5a <HID_Device_ConfigureEndpoints+0x40>
     e56:	12 e0       	ldi	r17, 0x02	; 2
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <HID_Device_ConfigureEndpoints+0x42>
     e5a:	16 e0       	ldi	r17, 0x06	; 6
     e5c:	12 96       	adiw	r26, 0x02	; 2
     e5e:	8d 91       	ld	r24, X+
     e60:	9c 91       	ld	r25, X
     e62:	13 97       	sbiw	r26, 0x03	; 3
     e64:	0d dc       	rcall	.-2022   	; 0x680 <Endpoint_BytesToEPSizeMaskDynamic>
     e66:	18 2b       	or	r17, r24
     e68:	80 2f       	mov	r24, r16
     e6a:	61 ec       	ldi	r22, 0xC1	; 193
     e6c:	41 2f       	mov	r20, r17
     e6e:	16 dc       	rcall	.-2004   	; 0x69c <Endpoint_ConfigureEndpoint_Prv>
     e70:	81 11       	cpse	r24, r1
     e72:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}
	
	return true;
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	08 95       	ret

00000e7e <HID_Device_ProcessControlRequest>:

#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e7e:	6f 92       	push	r6
     e80:	7f 92       	push	r7
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	bf 92       	push	r11
     e88:	cf 92       	push	r12
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <HID_Device_ProcessControlRequest+0x1c>
     e9a:	0f 92       	push	r0
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	4c 01       	movw	r8, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     ea2:	6d b6       	in	r6, 0x3d	; 61
     ea4:	7e b6       	in	r7, 0x3e	; 62
#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     ea6:	80 91 e8 00 	lds	r24, 0x00E8
     eaa:	83 ff       	sbrs	r24, 3
     eac:	e4 c0       	rjmp	.+456    	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
	  return;
	  
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     eae:	f4 01       	movw	r30, r8
     eb0:	80 81       	ld	r24, Z
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	20 91 1f 01 	lds	r18, 0x011F
     eb8:	30 91 20 01 	lds	r19, 0x0120
     ebc:	28 17       	cp	r18, r24
     ebe:	39 07       	cpc	r19, r25
     ec0:	09 f0       	breq	.+2      	; 0xec4 <HID_Device_ProcessControlRequest+0x46>
     ec2:	d9 c0       	rjmp	.+434    	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
	  return;

	switch (USB_ControlRequest.bRequest)
     ec4:	80 91 1c 01 	lds	r24, 0x011C
     ec8:	83 30       	cpi	r24, 0x03	; 3
     eca:	09 f4       	brne	.+2      	; 0xece <HID_Device_ProcessControlRequest+0x50>
     ecc:	82 c0       	rjmp	.+260    	; 0xfd2 <HID_Device_ProcessControlRequest+0x154>
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	30 f4       	brcc	.+12     	; 0xede <HID_Device_ProcessControlRequest+0x60>
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	71 f0       	breq	.+28     	; 0xef2 <HID_Device_ProcessControlRequest+0x74>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	09 f0       	breq	.+2      	; 0xedc <HID_Device_ProcessControlRequest+0x5e>
     eda:	cd c0       	rjmp	.+410    	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
     edc:	b0 c0       	rjmp	.+352    	; 0x103e <HID_Device_ProcessControlRequest+0x1c0>
     ede:	8a 30       	cpi	r24, 0x0A	; 10
     ee0:	09 f4       	brne	.+2      	; 0xee4 <HID_Device_ProcessControlRequest+0x66>
     ee2:	96 c0       	rjmp	.+300    	; 0x1010 <HID_Device_ProcessControlRequest+0x192>
     ee4:	8b 30       	cpi	r24, 0x0B	; 11
     ee6:	09 f4       	brne	.+2      	; 0xeea <HID_Device_ProcessControlRequest+0x6c>
     ee8:	81 c0       	rjmp	.+258    	; 0xfec <HID_Device_ProcessControlRequest+0x16e>
     eea:	89 30       	cpi	r24, 0x09	; 9
     eec:	09 f0       	breq	.+2      	; 0xef0 <HID_Device_ProcessControlRequest+0x72>
     eee:	c3 c0       	rjmp	.+390    	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
     ef0:	38 c0       	rjmp	.+112    	; 0xf62 <HID_Device_ProcessControlRequest+0xe4>
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ef2:	80 91 1b 01 	lds	r24, 0x011B
     ef6:	81 3a       	cpi	r24, 0xA1	; 161
     ef8:	09 f0       	breq	.+2      	; 0xefc <HID_Device_ProcessControlRequest+0x7e>
     efa:	bd c0       	rjmp	.+378    	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
			{
				Endpoint_ClearSETUP();	
     efc:	80 91 e8 00 	lds	r24, 0x00E8
     f00:	87 7f       	andi	r24, 0xF7	; 247
     f02:	80 93 e8 00 	sts	0x00E8, r24

				uint16_t ReportINSize = 0;
     f06:	1b 82       	std	Y+3, r1	; 0x03
     f08:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID     = (USB_ControlRequest.wValue & 0xFF);
     f0a:	80 91 1d 01 	lds	r24, 0x011D
     f0e:	10 91 1e 01 	lds	r17, 0x011E
     f12:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType   = (USB_ControlRequest.wValue >> 8) - 1;

				memset(HIDInterfaceInfo->Config.PrevReportINBuffer, 0, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     f14:	f4 01       	movw	r30, r8
     f16:	47 81       	ldd	r20, Z+7	; 0x07
     f18:	85 81       	ldd	r24, Z+5	; 0x05
     f1a:	96 81       	ldd	r25, Z+6	; 0x06
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	50 d9       	rcall	.-3424   	; 0x1c4 <memset>
				
				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType,
     f24:	11 50       	subi	r17, 0x01	; 1
     f26:	f4 01       	movw	r30, r8
     f28:	25 81       	ldd	r18, Z+5	; 0x05
     f2a:	36 81       	ldd	r19, Z+6	; 0x06
     f2c:	c4 01       	movw	r24, r8
     f2e:	be 01       	movw	r22, r28
     f30:	6f 5f       	subi	r22, 0xFF	; 255
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	41 2f       	mov	r20, r17
     f36:	8e 01       	movw	r16, r28
     f38:	0e 5f       	subi	r16, 0xFE	; 254
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	60 d9       	rcall	.-3392   	; 0x1fe <CALLBACK_HID_Device_CreateHIDReport>
				                                    HIDInterfaceInfo->Config.PrevReportINBuffer, &ReportINSize);

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     f3e:	10 92 e9 00 	sts	0x00E9, r1
				Endpoint_Write_Control_Stream_LE(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize);
     f42:	6a 81       	ldd	r22, Y+2	; 0x02
     f44:	7b 81       	ldd	r23, Y+3	; 0x03
     f46:	f4 01       	movw	r30, r8
     f48:	85 81       	ldd	r24, Z+5	; 0x05
     f4a:	96 81       	ldd	r25, Z+6	; 0x06
     f4c:	64 dc       	rcall	.-1848   	; 0x816 <Endpoint_Write_Control_Stream_LE>
				Endpoint_ClearOUT();
     f4e:	80 91 e8 00 	lds	r24, 0x00E8
     f52:	98 2f       	mov	r25, r24
     f54:	9b 7f       	andi	r25, 0xFB	; 251
     f56:	90 93 e8 00 	sts	0x00E8, r25
     f5a:	8f 77       	andi	r24, 0x7F	; 127
     f5c:	80 93 e8 00 	sts	0x00E8, r24
     f60:	8a c0       	rjmp	.+276    	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f62:	80 91 1b 01 	lds	r24, 0x011B
     f66:	81 32       	cpi	r24, 0x21	; 33
     f68:	09 f0       	breq	.+2      	; 0xf6c <HID_Device_ProcessControlRequest+0xee>
     f6a:	85 c0       	rjmp	.+266    	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
     f6c:	be b6       	in	r11, 0x3e	; 62
			{
				Endpoint_ClearSETUP();
     f6e:	80 91 e8 00 	lds	r24, 0x00E8
     f72:	87 7f       	andi	r24, 0xF7	; 247
     f74:	80 93 e8 00 	sts	0x00E8, r24
				
				uint16_t ReportOUTSize = USB_ControlRequest.wLength;
     f78:	e0 90 21 01 	lds	r14, 0x0121
     f7c:	f0 90 22 01 	lds	r15, 0x0122
				uint8_t  ReportOUTData[ReportOUTSize];
     f80:	8d b7       	in	r24, 0x3d	; 61
     f82:	9e b7       	in	r25, 0x3e	; 62
     f84:	8e 19       	sub	r24, r14
     f86:	9f 09       	sbc	r25, r15
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	9e bf       	out	0x3e, r25	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	8d bf       	out	0x3d, r24	; 61
     f92:	0d b7       	in	r16, 0x3d	; 61
     f94:	1e b7       	in	r17, 0x3e	; 62
     f96:	0f 5f       	subi	r16, 0xFF	; 255
     f98:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t  ReportID = (USB_ControlRequest.wValue & 0xFF);
     f9a:	d0 90 1d 01 	lds	r13, 0x011D

				Endpoint_Read_Control_Stream_LE(ReportOUTData, ReportOUTSize);
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	f9 dc       	rcall	.-1550   	; 0x996 <Endpoint_Read_Control_Stream_LE>
				Endpoint_ClearIN();
     fa4:	80 91 e8 00 	lds	r24, 0x00E8
     fa8:	98 2f       	mov	r25, r24
     faa:	9e 7f       	andi	r25, 0xFE	; 254
     fac:	90 93 e8 00 	sts	0x00E8, r25
     fb0:	8f 77       	andi	r24, 0x7F	; 127
     fb2:	80 93 e8 00 	sts	0x00E8, r24
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportOUTData, ReportOUTSize);
     fb6:	c4 01       	movw	r24, r8
     fb8:	6d 2d       	mov	r22, r13
     fba:	a8 01       	movw	r20, r16
     fbc:	97 01       	movw	r18, r14
     fbe:	68 d9       	rcall	.-3376   	; 0x290 <CALLBACK_HID_Device_ProcessHIDReport>
     fc0:	26 2d       	mov	r18, r6
     fc2:	3b 2d       	mov	r19, r11
     fc4:	c9 01       	movw	r24, r18
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	9e bf       	out	0x3e, r25	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	8d bf       	out	0x3d, r24	; 61
     fd0:	52 c0       	rjmp	.+164    	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
			}
			
			break;
		case REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     fd2:	80 91 1b 01 	lds	r24, 0x011B
     fd6:	81 3a       	cpi	r24, 0xA1	; 161
     fd8:	09 f0       	breq	.+2      	; 0xfdc <HID_Device_ProcessControlRequest+0x15e>
     fda:	4d c0       	rjmp	.+154    	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
			{
				Endpoint_ClearSETUP();
     fdc:	80 91 e8 00 	lds	r24, 0x00E8
     fe0:	87 7f       	andi	r24, 0xF7	; 247
     fe2:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
     fe6:	f4 01       	movw	r30, r8
     fe8:	80 85       	ldd	r24, Z+8	; 0x08
     fea:	39 c0       	rjmp	.+114    	; 0x105e <HID_Device_ProcessControlRequest+0x1e0>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fec:	80 91 1b 01 	lds	r24, 0x011B
     ff0:	81 32       	cpi	r24, 0x21	; 33
     ff2:	09 f0       	breq	.+2      	; 0xff6 <HID_Device_ProcessControlRequest+0x178>
     ff4:	40 c0       	rjmp	.+128    	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
			{
				Endpoint_ClearSETUP();
     ff6:	80 91 e8 00 	lds	r24, 0x00E8
     ffa:	87 7f       	andi	r24, 0xF7	; 247
     ffc:	80 93 e8 00 	sts	0x00E8, r24

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	80 91 1d 01 	lds	r24, 0x011D
    1006:	81 11       	cpse	r24, r1
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	f4 01       	movw	r30, r8
    100c:	90 87       	std	Z+8, r25	; 0x08
    100e:	32 c0       	rjmp	.+100    	; 0x1074 <HID_Device_ProcessControlRequest+0x1f6>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1010:	80 91 1b 01 	lds	r24, 0x011B
    1014:	81 32       	cpi	r24, 0x21	; 33
    1016:	79 f5       	brne	.+94     	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
			{
				Endpoint_ClearSETUP();
    1018:	80 91 e8 00 	lds	r24, 0x00E8
    101c:	87 7f       	andi	r24, 0xF7	; 247
    101e:	80 93 e8 00 	sts	0x00E8, r24
					
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1022:	80 91 1d 01 	lds	r24, 0x011D
    1026:	90 91 1e 01 	lds	r25, 0x011E
    102a:	80 70       	andi	r24, 0x00	; 0
    102c:	36 e0       	ldi	r19, 0x06	; 6
    102e:	96 95       	lsr	r25
    1030:	87 95       	ror	r24
    1032:	3a 95       	dec	r19
    1034:	e1 f7       	brne	.-8      	; 0x102e <HID_Device_ProcessControlRequest+0x1b0>
    1036:	f4 01       	movw	r30, r8
    1038:	92 87       	std	Z+10, r25	; 0x0a
    103a:	81 87       	std	Z+9, r24	; 0x09
    103c:	1b c0       	rjmp	.+54     	; 0x1074 <HID_Device_ProcessControlRequest+0x1f6>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    103e:	80 91 1b 01 	lds	r24, 0x011B
    1042:	81 3a       	cpi	r24, 0xA1	; 161
    1044:	c1 f4       	brne	.+48     	; 0x1076 <HID_Device_ProcessControlRequest+0x1f8>
			{		
				Endpoint_ClearSETUP();
    1046:	80 91 e8 00 	lds	r24, 0x00E8
    104a:	87 7f       	andi	r24, 0xF7	; 247
    104c:	80 93 e8 00 	sts	0x00E8, r24
				
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
    1050:	f4 01       	movw	r30, r8
    1052:	81 85       	ldd	r24, Z+9	; 0x09
    1054:	92 85       	ldd	r25, Z+10	; 0x0a
    1056:	96 95       	lsr	r25
    1058:	87 95       	ror	r24
    105a:	96 95       	lsr	r25
    105c:	87 95       	ror	r24
    105e:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_ClearIN();
    1062:	80 91 e8 00 	lds	r24, 0x00E8
    1066:	98 2f       	mov	r25, r24
    1068:	9e 7f       	andi	r25, 0xFE	; 254
    106a:	90 93 e8 00 	sts	0x00E8, r25
    106e:	8f 77       	andi	r24, 0x7F	; 127
    1070:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearStatusStage();
    1074:	3d db       	rcall	.-2438   	; 0x6f0 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	7e be       	out	0x3e, r7	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	6d be       	out	0x3d, r6	; 61
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	bf 90       	pop	r11
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	7f 90       	pop	r7
    109e:	6f 90       	pop	r6
    10a0:	08 95       	ret

000010a2 <_exit>:
    10a2:	f8 94       	cli

000010a4 <__stop_program>:
    10a4:	ff cf       	rjmp	.-2      	; 0x10a4 <__stop_program>
